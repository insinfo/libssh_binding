// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, camel_case_types, slash_for_doc_comments

import 'dart:ffi' as ffi;
import 'callbacks.dart';
import 'sftp_binding.dart';

/// Bindings to libssh - The SSH library!
/// libssh is a multiplatform C library implementing the SSHv2 protocol on client and server side.
/// With libssh, you can remotely execute programs, transfer files, use a secure and transparent tunnel
/// https://www.libssh.org/
class LibsshBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibsshBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibsshBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /*********************************** INICIO SFTP ***************************************/

  /// @brief Creates a new sftp session.
  ///
  /// This function creates a new sftp session and allocates a new sftp channel
  /// with the server inside of the provided ssh session. This function call is
  /// usually followed by the sftp_init(), which initializes SFTP protocol itself.
  ///
  /// @param session       The ssh session to use.
  ///
  /// @return              A new sftp session or NULL on error.
  ///
  /// @see sftp_free()
  /// @see sftp_init()
  sftp_session sftp_new(
    ssh_session session,
  ) {
    return _sftp_new(
      session,
    );
  }

  late final _sftp_newPtr =
      _lookup<ffi.NativeFunction<sftp_session Function(ssh_session)>>(
          'sftp_new');
  late final sftp_session Function(ssh_session) _sftp_new =
      _sftp_newPtr.asFunction<sftp_session Function(ssh_session)>();

  /// @brief Start a new sftp session with an existing channel.
  ///
  /// @param session       The ssh session to use.
  /// @param channel		An open session channel with subsystem already allocated
  ///
  /// @return              A new sftp session or NULL on error.
  ///
  /// @see sftp_free()
  sftp_session sftp_new_channel(
    ssh_session session,
    ssh_channel channel,
  ) {
    return _sftp_new_channel(
      session,
      channel,
    );
  }

  late final _sftp_new_channelPtr = _lookup<
          ffi.NativeFunction<sftp_session Function(ssh_session, ssh_channel)>>(
      'sftp_new_channel');
  late final _sftp_new_channel = _sftp_new_channelPtr
      .asFunction<sftp_session Function(ssh_session, ssh_channel)>();

  /// @brief Close and deallocate a sftp session.
  ///
  /// @param sftp          The sftp session handle to free.
  void sftp_free(
    sftp_session sftp,
  ) {
    return _sftp_free(
      sftp,
    );
  }

  late final _sftp_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(sftp_session)>>('sftp_free');
  late final _sftp_free =
      _sftp_freePtr.asFunction<void Function(sftp_session)>();

  /// @brief Initialize the sftp protocol with the server.
  ///
  /// This function involves the SFTP protocol initialization (as described
  /// in the SFTP specification), including the version and extensions negotiation.
  ///
  /// @param sftp          The sftp session to initialize.
  ///
  /// @return              0 on success, < 0 on error with ssh error set.
  ///
  /// @see sftp_new()
  int sftp_init(
    sftp_session sftp,
  ) {
    return _sftp_init(
      sftp,
    );
  }

  late final _sftp_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_session)>>(
          'sftp_init');
  late final _sftp_init =
      _sftp_initPtr.asFunction<int Function(sftp_session)>();

  /// @brief Get the last sftp error.
  ///
  /// Use this function to get the latest error set by a posix like sftp function.
  ///
  /// @param sftp          The sftp session where the error is saved.
  ///
  /// @return              The saved error (see server responses), < 0 if an error
  /// in the function occured.
  ///
  /// @see Server responses
  int sftp_get_error(
    sftp_session sftp,
  ) {
    return _sftp_get_error(
      sftp,
    );
  }

  late final _sftp_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_session)>>(
          'sftp_get_error');
  late final _sftp_get_error =
      _sftp_get_errorPtr.asFunction<int Function(sftp_session)>();

  /// @brief Get the count of extensions provided by the server.
  ///
  /// @param  sftp         The sftp session to use.
  ///
  /// @return The count of extensions provided by the server, 0 on error or
  /// not available.
  int sftp_extensions_get_count(
    sftp_session sftp,
  ) {
    return _sftp_extensions_get_count(
      sftp,
    );
  }

  late final _sftp_extensions_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(sftp_session)>>(
          'sftp_extensions_get_count');
  late final _sftp_extensions_get_count =
      _sftp_extensions_get_countPtr.asFunction<int Function(sftp_session)>();

  /// @brief Get the name of the extension provided by the server.
  ///
  /// @param  sftp         The sftp session to use.
  ///
  /// @param  indexn        The index number of the extension name you want.
  ///
  /// @return              The name of the extension.
  ffi.Pointer<ffi.Int8> sftp_extensions_get_name(
    sftp_session sftp,
    int indexn,
  ) {
    return _sftp_extensions_get_name(
      sftp,
      indexn,
    );
  }

  late final _sftp_extensions_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              sftp_session, ffi.Uint32)>>('sftp_extensions_get_name');
  late final _sftp_extensions_get_name = _sftp_extensions_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(sftp_session, int)>();

  /// @brief Get the data of the extension provided by the server.
  ///
  /// This is normally the version number of the extension.
  ///
  /// @param  sftp         The sftp session to use.
  ///
  /// @param  indexn        The index number of the extension data you want.
  ///
  /// @return              The data of the extension.
  ffi.Pointer<ffi.Int8> sftp_extensions_get_data(
    sftp_session sftp,
    int indexn,
  ) {
    return _sftp_extensions_get_data(
      sftp,
      indexn,
    );
  }

  late final _sftp_extensions_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              sftp_session, ffi.Uint32)>>('sftp_extensions_get_data');
  late final _sftp_extensions_get_data = _sftp_extensions_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(sftp_session, int)>();

  /// @brief Check if the given extension is supported.
  ///
  /// @param  sftp         The sftp session to use.
  ///
  /// @param  name         The name of the extension.
  ///
  /// @param  data         The data of the extension.
  ///
  /// @return 1 if supported, 0 if not.
  ///
  /// Example:
  ///
  /// @code
  /// sftp_extension_supported(sftp, "statvfs@openssh.com", "2");
  /// @endcode
  int sftp_extension_supported(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _sftp_extension_supported(
      sftp,
      name,
      data,
    );
  }

  late final _sftp_extension_supportedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_session, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('sftp_extension_supported');
  late final _sftp_extension_supported =
      _sftp_extension_supportedPtr.asFunction<
          int Function(
              sftp_session, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  /// @brief Open a directory used to obtain directory entries.
  ///
  /// @param session       The sftp session handle to open the directory.
  /// @param path          The path of the directory to open.
  ///
  /// @return              A sftp directory handle or NULL on error with ssh and
  /// sftp error set.
  ///
  /// @see                 sftp_readdir
  /// @see                 sftp_closedir
  sftp_dir sftp_opendir(
    sftp_session session,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _sftp_opendir(
      session,
      path,
    );
  }

  late final _sftp_opendirPtr = _lookup<
      ffi.NativeFunction<
          sftp_dir Function(
              sftp_session, ffi.Pointer<ffi.Int8>)>>('sftp_opendir');
  late final _sftp_opendir = _sftp_opendirPtr
      .asFunction<sftp_dir Function(sftp_session, ffi.Pointer<ffi.Int8>)>();

  /// @brief Get a single file attributes structure of a directory.
  ///
  /// @param session      The sftp session handle to read the directory entry.
  /// @param dir          The opened sftp directory handle to read from.
  ///
  /// @return             A file attribute structure or NULL at the end of the
  /// directory.
  ///
  /// @see                sftp_opendir()
  /// @see                sftp_attribute_free()
  /// @see                sftp_closedir()
  sftp_attributes sftp_readdir(
    sftp_session session,
    sftp_dir dir,
  ) {
    return _sftp_readdir(
      session,
      dir,
    );
  }

  late final _sftp_readdirPtr = _lookup<
          ffi.NativeFunction<sftp_attributes Function(sftp_session, sftp_dir)>>(
      'sftp_readdir');
  late final _sftp_readdir = _sftp_readdirPtr
      .asFunction<sftp_attributes Function(sftp_session, sftp_dir)>();

  /// @brief Tell if the directory has reached EOF (End Of File).
  ///
  /// @param dir           The sftp directory handle.
  ///
  /// @return              1 if the directory is EOF, 0 if not.
  ///
  /// @see                 sftp_readdir()
  int sftp_dir_eof(
    sftp_dir dir,
  ) {
    return _sftp_dir_eof(
      dir,
    );
  }

  late final _sftp_dir_eofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_dir)>>('sftp_dir_eof');
  late final _sftp_dir_eof =
      _sftp_dir_eofPtr.asFunction<int Function(sftp_dir)>();

  /// @brief Get information about a file or directory.
  ///
  /// @param session       The sftp session handle.
  /// @param path          The path to the file or directory to obtain the
  /// information.
  ///
  /// @return              The sftp attributes structure of the file or directory,
  /// NULL on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  sftp_attributes sftp_stat(
    sftp_session session,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _sftp_stat(
      session,
      path,
    );
  }

  late final _sftp_statPtr = _lookup<
      ffi.NativeFunction<
          sftp_attributes Function(
              sftp_session, ffi.Pointer<ffi.Int8>)>>('sftp_stat');
  late final _sftp_stat = _sftp_statPtr.asFunction<
      sftp_attributes Function(sftp_session, ffi.Pointer<ffi.Int8>)>();

  /// @brief Get information about a file or directory.
  ///
  /// Identical to sftp_stat, but if the file or directory is a symbolic link,
  /// then the link itself is stated, not the file that it refers to.
  ///
  /// @param session       The sftp session handle.
  /// @param path          The path to the file or directory to obtain the
  /// information.
  ///
  /// @return              The sftp attributes structure of the file or directory,
  /// NULL on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  sftp_attributes sftp_lstat(
    sftp_session session,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _sftp_lstat(
      session,
      path,
    );
  }

  late final _sftp_lstatPtr = _lookup<
      ffi.NativeFunction<
          sftp_attributes Function(
              sftp_session, ffi.Pointer<ffi.Int8>)>>('sftp_lstat');
  late final _sftp_lstat = _sftp_lstatPtr.asFunction<
      sftp_attributes Function(sftp_session, ffi.Pointer<ffi.Int8>)>();

  /// @brief Get information about a file or directory from a file handle.
  ///
  /// @param file          The sftp file handle to get the stat information.
  ///
  /// @return              The sftp attributes structure of the file or directory,
  /// NULL on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  sftp_attributes sftp_fstat(
    sftp_file file,
  ) {
    return _sftp_fstat(
      file,
    );
  }

  late final _sftp_fstatPtr =
      _lookup<ffi.NativeFunction<sftp_attributes Function(sftp_file)>>(
          'sftp_fstat');
  late final _sftp_fstat =
      _sftp_fstatPtr.asFunction<sftp_attributes Function(sftp_file)>();

  /// @brief Free a sftp attribute structure.
  ///
  /// @param file          The sftp attribute structure to free.
  void sftp_attributes_free(
    sftp_attributes file,
  ) {
    return _sftp_attributes_free(
      file,
    );
  }

  late final _sftp_attributes_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(sftp_attributes)>>(
          'sftp_attributes_free');
  late final _sftp_attributes_free =
      _sftp_attributes_freePtr.asFunction<void Function(sftp_attributes)>();

  /// @brief Close a directory handle opened by sftp_opendir().
  ///
  /// @param dir           The sftp directory handle to close.
  ///
  /// @return              Returns SSH_NO_ERROR or SSH_ERROR if an error occured.
  int sftp_closedir(
    sftp_dir dir,
  ) {
    return _sftp_closedir(
      dir,
    );
  }

  late final _sftp_closedirPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_dir)>>(
          'sftp_closedir');
  late final _sftp_closedir =
      _sftp_closedirPtr.asFunction<int Function(sftp_dir)>();

  /// @brief Close an open file handle.
  ///
  /// @param file          The open sftp file handle to close.
  ///
  /// @return              Returns SSH_NO_ERROR or SSH_ERROR if an error occured.
  ///
  /// @see                 sftp_open()
  int sftp_close(
    sftp_file file,
  ) {
    return _sftp_close(
      file,
    );
  }

  late final _sftp_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_file)>>('sftp_close');
  late final _sftp_close = _sftp_closePtr.asFunction<int Function(sftp_file)>();

  /// @brief Open a file on the server.
  ///
  /// @param session       The sftp session handle.
  ///
  /// @param file          The file to be opened.
  ///
  /// @param accesstype    Is one of O_RDONLY, O_WRONLY or O_RDWR which request
  /// opening  the  file  read-only,write-only or read/write.
  /// Acesss may also be bitwise-or'd with one or  more of
  /// the following:
  /// O_CREAT - If the file does not exist it will be
  /// created.
  /// O_EXCL - When  used with O_CREAT, if the file already
  /// exists it is an error and the open will fail.
  /// O_TRUNC - If the file already exists it will be
  /// truncated.
  ///
  /// @param mode          Mode specifies the permissions to use if a new file is
  /// created.  It  is  modified  by  the process's umask in
  /// the usual way: The permissions of the created file are
  /// (mode & ~umask)
  ///
  /// @return              A sftp file handle, NULL on error with ssh and sftp
  /// error set.
  ///
  /// @see sftp_get_error()
  sftp_file sftp_open(
    sftp_session session,
    ffi.Pointer<ffi.Int8> file,
    int accesstype,
    int mode,
  ) {
    return _sftp_open(
      session,
      file,
      accesstype,
      mode,
    );
  }

  late final _sftp_openPtr = _lookup<
      ffi.NativeFunction<
          sftp_file Function(sftp_session, ffi.Pointer<ffi.Int8>, ffi.Int32,
              mode_t)>>('sftp_open');
  late final _sftp_open = _sftp_openPtr.asFunction<
      sftp_file Function(sftp_session, ffi.Pointer<ffi.Int8>, int, int)>();

  /// @brief Make the sftp communication for this file handle non blocking.
  ///
  /// @param[in]  handle   The file handle to set non blocking.
  void sftp_file_set_nonblocking(
    sftp_file handle,
  ) {
    return _sftp_file_set_nonblocking(
      handle,
    );
  }

  late final _sftp_file_set_nonblockingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(sftp_file)>>(
          'sftp_file_set_nonblocking');
  late final _sftp_file_set_nonblocking =
      _sftp_file_set_nonblockingPtr.asFunction<void Function(sftp_file)>();

  /// @brief Make the sftp communication for this file handle blocking.
  ///
  /// @param[in]  handle   The file handle to set blocking.
  void sftp_file_set_blocking(
    sftp_file handle,
  ) {
    return _sftp_file_set_blocking(
      handle,
    );
  }

  late final _sftp_file_set_blockingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(sftp_file)>>(
          'sftp_file_set_blocking');
  late final _sftp_file_set_blocking =
      _sftp_file_set_blockingPtr.asFunction<void Function(sftp_file)>();

  /// @brief Read from a file using an opened sftp file handle.
  ///
  /// @param file          The opened sftp file handle to be read from.
  ///
  /// @param buf           Pointer to buffer to recieve read data.
  ///
  /// @param count         Size of the buffer in bytes.
  ///
  /// @return              Number of bytes written, < 0 on error with ssh and sftp
  /// error set.
  ///
  /// @see sftp_get_error()
  int sftp_read(
    sftp_file file,
    ffi.Pointer<ffi.Void> buf,
    int count,
  ) {
    return _sftp_read(
      file,
      buf,
      count,
    );
  }

  late final _sftp_readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              sftp_file, ffi.Pointer<ffi.Void>, size_t)>>('sftp_read');
  late final _sftp_read = _sftp_readPtr
      .asFunction<int Function(sftp_file, ffi.Pointer<ffi.Void>, int)>();

  /// @brief Start an asynchronous read from a file using an opened sftp file handle.
  ///
  /// Its goal is to avoid the slowdowns related to the request/response pattern
  /// of a synchronous read. To do so, you must call 2 functions:
  ///
  /// sftp_async_read_begin() and sftp_async_read().
  ///
  /// The first step is to call sftp_async_read_begin(). This function returns a
  /// request identifier. The second step is to call sftp_async_read() using the
  /// returned identifier.
  ///
  /// @param file          The opened sftp file handle to be read from.
  ///
  /// @param len           Size to read in bytes.
  ///
  /// @return              An identifier corresponding to the sent request, < 0 on
  /// error.
  ///
  /// @warning             When calling this function, the internal offset is
  /// updated corresponding to the len parameter.
  ///
  /// @warning             A call to sftp_async_read_begin() sends a request to
  /// the server. When the server answers, libssh allocates
  /// memory to store it until sftp_async_read() is called.
  /// Not calling sftp_async_read() will lead to memory
  /// leaks.
  ///
  /// @see                 sftp_async_read()
  /// @see                 sftp_open()
  int sftp_async_read_begin(
    sftp_file file,
    int len,
  ) {
    return _sftp_async_read_begin(
      file,
      len,
    );
  }

  late final _sftp_async_read_beginPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_file, ffi.Uint32)>>(
          'sftp_async_read_begin');
  late final _sftp_async_read_begin =
      _sftp_async_read_beginPtr.asFunction<int Function(sftp_file, int)>();

  /// @brief Wait for an asynchronous read to complete and save the data.
  ///
  /// @param file          The opened sftp file handle to be read from.
  ///
  /// @param data          Pointer to buffer to recieve read data.
  ///
  /// @param len           Size of the buffer in bytes. It should be bigger or
  /// equal to the length parameter of the
  /// sftp_async_read_begin() call.
  ///
  /// @param id            The identifier returned by the sftp_async_read_begin()
  /// function.
  ///
  /// @return              Number of bytes read, 0 on EOF, SSH_ERROR if an error
  /// occured, SSH_AGAIN if the file is opened in nonblocking
  /// mode and the request hasn't been executed yet.
  ///
  /// @warning             A call to this function with an invalid identifier
  /// will never return.
  ///
  /// @see sftp_async_read_begin()
  int sftp_async_read(
    sftp_file file,
    ffi.Pointer<ffi.Void> data,
    int len,
    int id,
  ) {
    return _sftp_async_read(
      file,
      data,
      len,
      id,
    );
  }

  late final _sftp_async_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_file, ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Uint32)>>('sftp_async_read');
  late final _sftp_async_read = _sftp_async_readPtr
      .asFunction<int Function(sftp_file, ffi.Pointer<ffi.Void>, int, int)>();

  /// @brief Write to a file using an opened sftp file handle.
  ///
  /// @param file          Open sftp file handle to write to.
  ///
  /// @param buf           Pointer to buffer to write data.
  ///
  /// @param count         Size of buffer in bytes.
  ///
  /// @return              Number of bytes written, < 0 on error with ssh and sftp
  /// error set.
  ///
  /// @see                 sftp_open()
  /// @see                 sftp_read()
  /// @see                 sftp_close()
  int sftp_write(
    sftp_file file,
    ffi.Pointer<ffi.Void> buf,
    int count,
  ) {
    return _sftp_write(
      file,
      buf,
      count,
    );
  }

  late final _sftp_writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              sftp_file, ffi.Pointer<ffi.Void>, size_t)>>('sftp_write');
  late final _sftp_write = _sftp_writePtr
      .asFunction<int Function(sftp_file, ffi.Pointer<ffi.Void>, int)>();

  /// @brief Seek to a specific location in a file.
  ///
  /// @param file         Open sftp file handle to seek in.
  ///
  /// @param new_offset   Offset in bytes to seek.
  ///
  /// @return             0 on success, < 0 on error.
  int sftp_seek(
    sftp_file file,
    int new_offset,
  ) {
    return _sftp_seek(
      file,
      new_offset,
    );
  }

  late final _sftp_seekPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_file, ffi.Uint32)>>(
          'sftp_seek');
  late final _sftp_seek =
      _sftp_seekPtr.asFunction<int Function(sftp_file, int)>();

  /// @brief Seek to a specific location in a file. This is the
  /// 64bit version.
  ///
  /// @param file         Open sftp file handle to seek in.
  ///
  /// @param new_offset   Offset in bytes to seek.
  ///
  /// @return             0 on success, < 0 on error.
  int sftp_seek64(
    sftp_file file,
    int new_offset,
  ) {
    return _sftp_seek64(
      file,
      new_offset,
    );
  }

  late final _sftp_seek64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_file, ffi.Uint64)>>(
          'sftp_seek64');
  late final _sftp_seek64 =
      _sftp_seek64Ptr.asFunction<int Function(sftp_file, int)>();

  /// @brief Report current byte position in file.
  ///
  /// @param file          Open sftp file handle.
  ///
  /// @return              The offset of the current byte relative to the beginning
  /// of the file associated with the file descriptor. < 0 on
  /// error.
  int sftp_tell(
    sftp_file file,
  ) {
    return _sftp_tell(
      file,
    );
  }

  late final _sftp_tellPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(sftp_file)>>('sftp_tell');
  late final _sftp_tell = _sftp_tellPtr.asFunction<int Function(sftp_file)>();

  /// @brief Report current byte position in file.
  ///
  /// @param file          Open sftp file handle.
  ///
  /// @return              The offset of the current byte relative to the beginning
  /// of the file associated with the file descriptor. < 0 on
  /// error.
  int sftp_tell64(
    sftp_file file,
  ) {
    return _sftp_tell64(
      file,
    );
  }

  late final _sftp_tell64Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(sftp_file)>>(
          'sftp_tell64');
  late final _sftp_tell64 =
      _sftp_tell64Ptr.asFunction<int Function(sftp_file)>();

  /// @brief Rewinds the position of the file pointer to the beginning of the
  /// file.
  ///
  /// @param file          Open sftp file handle.
  void sftp_rewind(
    sftp_file file,
  ) {
    return _sftp_rewind(
      file,
    );
  }

  late final _sftp_rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(sftp_file)>>('sftp_rewind');
  late final _sftp_rewind =
      _sftp_rewindPtr.asFunction<void Function(sftp_file)>();

  /// @brief Unlink (delete) a file.
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param file          The file to unlink/delete.
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_unlink(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _sftp_unlink(
      sftp,
      file,
    );
  }

  late final _sftp_unlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              sftp_session, ffi.Pointer<ffi.Int8>)>>('sftp_unlink');
  late final _sftp_unlink = _sftp_unlinkPtr
      .asFunction<int Function(sftp_session, ffi.Pointer<ffi.Int8>)>();

  /// @brief Remove a directoy.
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param directory     The directory to remove.
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_rmdir(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> directory,
  ) {
    return _sftp_rmdir(
      sftp,
      directory,
    );
  }

  late final _sftp_rmdirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              sftp_session, ffi.Pointer<ffi.Int8>)>>('sftp_rmdir');
  late final _sftp_rmdir = _sftp_rmdirPtr
      .asFunction<int Function(sftp_session, ffi.Pointer<ffi.Int8>)>();

  /// @brief Create a directory.
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param directory     The directory to create.
  ///
  /// @param mode          Specifies the permissions to use. It is modified by the
  /// process's umask in the usual way:
  /// The permissions of the created file are (mode & ~umask)
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_mkdir(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> directory,
    int mode,
  ) {
    return _sftp_mkdir(
      sftp,
      directory,
      mode,
    );
  }

  late final _sftp_mkdirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              sftp_session, ffi.Pointer<ffi.Int8>, mode_t)>>('sftp_mkdir');
  late final _sftp_mkdir = _sftp_mkdirPtr
      .asFunction<int Function(sftp_session, ffi.Pointer<ffi.Int8>, int)>();

  /// @brief Rename or move a file or directory.
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param original      The original url (source url) of file or directory to
  /// be moved.
  ///
  /// @param newname       The new url (destination url) of the file or directory
  /// after the move.
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_rename(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> original,
    ffi.Pointer<ffi.Int8> newname,
  ) {
    return _sftp_rename(
      sftp,
      original,
      newname,
    );
  }

  late final _sftp_renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_session, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('sftp_rename');
  late final _sftp_rename = _sftp_renamePtr.asFunction<
      int Function(
          sftp_session, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  /// @brief Set file attributes on a file, directory or symbolic link.
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param file          The file which attributes should be changed.
  ///
  /// @param attr          The file attributes structure with the attributes set
  /// which should be changed.
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_setstat(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> file,
    sftp_attributes attr,
  ) {
    return _sftp_setstat(
      sftp,
      file,
      attr,
    );
  }

  late final _sftp_setstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_session, ffi.Pointer<ffi.Int8>,
              sftp_attributes)>>('sftp_setstat');
  late final _sftp_setstat = _sftp_setstatPtr.asFunction<
      int Function(sftp_session, ffi.Pointer<ffi.Int8>, sftp_attributes)>();

  /// @brief Change the file owner and group
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param file          The file which owner and group should be changed.
  ///
  /// @param owner         The new owner which should be set.
  ///
  /// @param group         The new group which should be set.
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_chown(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> file,
    int owner,
    int group,
  ) {
    return _sftp_chown(
      sftp,
      file,
      owner,
      group,
    );
  }

  late final _sftp_chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_session, ffi.Pointer<ffi.Int8>, uid_t,
              gid_t)>>('sftp_chown');
  late final _sftp_chown = _sftp_chownPtr.asFunction<
      int Function(sftp_session, ffi.Pointer<ffi.Int8>, int, int)>();

  /// @brief Change permissions of a file
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param file          The file which owner and group should be changed.
  ///
  /// @param mode          Specifies the permissions to use. It is modified by the
  /// process's umask in the usual way:
  /// The permissions of the created file are (mode & ~umask)
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_chmod(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> file,
    int mode,
  ) {
    return _sftp_chmod(
      sftp,
      file,
      mode,
    );
  }

  late final _sftp_chmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              sftp_session, ffi.Pointer<ffi.Int8>, mode_t)>>('sftp_chmod');
  late final _sftp_chmod = _sftp_chmodPtr
      .asFunction<int Function(sftp_session, ffi.Pointer<ffi.Int8>, int)>();

  /// @brief Change the last modification and access time of a file.
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param file          The file which owner and group should be changed.
  ///
  /// @param times         A timeval structure which contains the desired access
  /// and modification time.
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_utimes(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<timeval> times,
  ) {
    return _sftp_utimes(
      sftp,
      file,
      times,
    );
  }

  late final _sftp_utimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_session, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<timeval>)>>('sftp_utimes');
  late final _sftp_utimes = _sftp_utimesPtr.asFunction<
      int Function(
          sftp_session, ffi.Pointer<ffi.Int8>, ffi.Pointer<timeval>)>();

  /// @brief Create a symbolic link.
  ///
  /// @param  sftp         The sftp session handle.
  ///
  /// @param  target       Specifies the target of the symlink.
  ///
  /// @param  dest         Specifies the path name of the symlink to be created.
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  ///
  /// @see sftp_get_error()
  int sftp_symlink(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> target,
    ffi.Pointer<ffi.Int8> dest,
  ) {
    return _sftp_symlink(
      sftp,
      target,
      dest,
    );
  }

  late final _sftp_symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_session, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('sftp_symlink');
  late final _sftp_symlink = _sftp_symlinkPtr.asFunction<
      int Function(
          sftp_session, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  /// @brief Read the value of a symbolic link.
  ///
  /// @param  sftp         The sftp session handle.
  ///
  /// @param  path         Specifies the path name of the symlink to be read.
  ///
  /// @return              The target of the link, NULL on error.
  ///
  /// @see sftp_get_error()
  ffi.Pointer<ffi.Int8> sftp_readlink(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _sftp_readlink(
      sftp,
      path,
    );
  }

  late final _sftp_readlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              sftp_session, ffi.Pointer<ffi.Int8>)>>('sftp_readlink');
  late final _sftp_readlink = _sftp_readlinkPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(sftp_session, ffi.Pointer<ffi.Int8>)>();

  /// @brief Get information about a mounted file system.
  ///
  /// @param  sftp         The sftp session handle.
  ///
  /// @param  path         The pathname of any file within the mounted file system.
  ///
  /// @return A statvfs structure or NULL on error.
  ///
  /// @see sftp_get_error()
  sftp_statvfs_t sftp_statvfs(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _sftp_statvfs(
      sftp,
      path,
    );
  }

  late final _sftp_statvfsPtr = _lookup<
      ffi.NativeFunction<
          sftp_statvfs_t Function(
              sftp_session, ffi.Pointer<ffi.Int8>)>>('sftp_statvfs');
  late final _sftp_statvfs = _sftp_statvfsPtr.asFunction<
      sftp_statvfs_t Function(sftp_session, ffi.Pointer<ffi.Int8>)>();

  /// @brief Get information about a mounted file system.
  ///
  /// @param  file         An opened file.
  ///
  /// @return A statvfs structure or NULL on error.
  ///
  /// @see sftp_get_error()
  sftp_statvfs_t sftp_fstatvfs(
    sftp_file file,
  ) {
    return _sftp_fstatvfs(
      file,
    );
  }

  late final _sftp_fstatvfsPtr =
      _lookup<ffi.NativeFunction<sftp_statvfs_t Function(sftp_file)>>(
          'sftp_fstatvfs');
  late final _sftp_fstatvfs =
      _sftp_fstatvfsPtr.asFunction<sftp_statvfs_t Function(sftp_file)>();

  /// @brief Free the memory of an allocated statvfs.
  ///
  /// @param  statvfs_o      The statvfs to free.
  void sftp_statvfs_free(
    sftp_statvfs_t statvfs_o,
  ) {
    return _sftp_statvfs_free(
      statvfs_o,
    );
  }

  late final _sftp_statvfs_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(sftp_statvfs_t)>>(
          'sftp_statvfs_free');
  late final _sftp_statvfs_free =
      _sftp_statvfs_freePtr.asFunction<void Function(sftp_statvfs_t)>();

  /// @brief Synchronize a file's in-core state with storage device
  ///
  /// This calls the "fsync@openssh.com" extention. You should check if the
  /// extensions is supported using:
  ///
  /// @code
  /// int supported = sftp_extension_supported(sftp, "fsync@openssh.com", "1");
  /// @endcode
  ///
  /// @param file          The opened sftp file handle to sync
  ///
  /// @return              0 on success, < 0 on error with ssh and sftp error set.
  int sftp_fsync(
    sftp_file file,
  ) {
    return _sftp_fsync(
      file,
    );
  }

  late final _sftp_fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_file)>>('sftp_fsync');
  late final _sftp_fsync = _sftp_fsyncPtr.asFunction<int Function(sftp_file)>();

  /// @brief Canonicalize a sftp path.
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @param path          The path to be canonicalized.
  ///
  /// @return              A pointer to the newly allocated canonicalized path,
  /// NULL on error. The caller needs to free the memory
  /// using ssh_string_free_char().
  ffi.Pointer<ffi.Int8> sftp_canonicalize_path(
    sftp_session sftp,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _sftp_canonicalize_path(
      sftp,
      path,
    );
  }

  late final _sftp_canonicalize_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              sftp_session, ffi.Pointer<ffi.Int8>)>>('sftp_canonicalize_path');
  late final _sftp_canonicalize_path = _sftp_canonicalize_pathPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(sftp_session, ffi.Pointer<ffi.Int8>)>();

  /// @brief Get the version of the SFTP protocol supported by the server
  ///
  /// @param sftp          The sftp session handle.
  ///
  /// @return              The server version.
  int sftp_server_version(
    sftp_session sftp,
  ) {
    return _sftp_server_version(
      sftp,
    );
  }

  late final _sftp_server_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_session)>>(
          'sftp_server_version');
  late final _sftp_server_version =
      _sftp_server_versionPtr.asFunction<int Function(sftp_session)>();

  sftp_client_message sftp_get_client_message(
    sftp_session sftp,
  ) {
    return _sftp_get_client_message(
      sftp,
    );
  }

  late final _sftp_get_client_messagePtr =
      _lookup<ffi.NativeFunction<sftp_client_message Function(sftp_session)>>(
          'sftp_get_client_message');
  late final _sftp_get_client_message = _sftp_get_client_messagePtr
      .asFunction<sftp_client_message Function(sftp_session)>();

  void sftp_client_message_free(
    sftp_client_message msg,
  ) {
    return _sftp_client_message_free(
      msg,
    );
  }

  late final _sftp_client_message_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(sftp_client_message)>>(
          'sftp_client_message_free');
  late final _sftp_client_message_free = _sftp_client_message_freePtr
      .asFunction<void Function(sftp_client_message)>();

  int sftp_client_message_get_type(
    sftp_client_message msg,
  ) {
    return _sftp_client_message_get_type(
      msg,
    );
  }

  late final _sftp_client_message_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sftp_client_message)>>(
          'sftp_client_message_get_type');
  late final _sftp_client_message_get_type = _sftp_client_message_get_typePtr
      .asFunction<int Function(sftp_client_message)>();

  ffi.Pointer<ffi.Int8> sftp_client_message_get_filename(
    sftp_client_message msg,
  ) {
    return _sftp_client_message_get_filename(
      msg,
    );
  }

  late final _sftp_client_message_get_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              sftp_client_message)>>('sftp_client_message_get_filename');
  late final _sftp_client_message_get_filename =
      _sftp_client_message_get_filenamePtr
          .asFunction<ffi.Pointer<ffi.Int8> Function(sftp_client_message)>();

  void sftp_client_message_set_filename(
    sftp_client_message msg,
    ffi.Pointer<ffi.Int8> newname,
  ) {
    return _sftp_client_message_set_filename(
      msg,
      newname,
    );
  }

  late final _sftp_client_message_set_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sftp_client_message,
              ffi.Pointer<ffi.Int8>)>>('sftp_client_message_set_filename');
  late final _sftp_client_message_set_filename =
      _sftp_client_message_set_filenamePtr.asFunction<
          void Function(sftp_client_message, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> sftp_client_message_get_data(
    sftp_client_message msg,
  ) {
    return _sftp_client_message_get_data(
      msg,
    );
  }

  late final _sftp_client_message_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              sftp_client_message)>>('sftp_client_message_get_data');
  late final _sftp_client_message_get_data = _sftp_client_message_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(sftp_client_message)>();

  int sftp_client_message_get_flags(
    sftp_client_message msg,
  ) {
    return _sftp_client_message_get_flags(
      msg,
    );
  }

  late final _sftp_client_message_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(sftp_client_message)>>(
          'sftp_client_message_get_flags');
  late final _sftp_client_message_get_flags = _sftp_client_message_get_flagsPtr
      .asFunction<int Function(sftp_client_message)>();

  ffi.Pointer<ffi.Int8> sftp_client_message_get_submessage(
    sftp_client_message msg,
  ) {
    return _sftp_client_message_get_submessage(
      msg,
    );
  }

  late final _sftp_client_message_get_submessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              sftp_client_message)>>('sftp_client_message_get_submessage');
  late final _sftp_client_message_get_submessage =
      _sftp_client_message_get_submessagePtr
          .asFunction<ffi.Pointer<ffi.Int8> Function(sftp_client_message)>();

  int sftp_send_client_message(
    sftp_session sftp,
    sftp_client_message msg,
  ) {
    return _sftp_send_client_message(
      sftp,
      msg,
    );
  }

  late final _sftp_send_client_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              sftp_session, sftp_client_message)>>('sftp_send_client_message');
  late final _sftp_send_client_message = _sftp_send_client_messagePtr
      .asFunction<int Function(sftp_session, sftp_client_message)>();

  int sftp_reply_name(
    sftp_client_message msg,
    ffi.Pointer<ffi.Int8> name,
    sftp_attributes attr,
  ) {
    return _sftp_reply_name(
      msg,
      name,
      attr,
    );
  }

  late final _sftp_reply_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_client_message, ffi.Pointer<ffi.Int8>,
              sftp_attributes)>>('sftp_reply_name');
  late final _sftp_reply_name = _sftp_reply_namePtr.asFunction<
      int Function(
          sftp_client_message, ffi.Pointer<ffi.Int8>, sftp_attributes)>();

  int sftp_reply_handle(
    sftp_client_message msg,
    ssh_string handle,
  ) {
    return _sftp_reply_handle(
      msg,
      handle,
    );
  }

  late final _sftp_reply_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              sftp_client_message, ssh_string)>>('sftp_reply_handle');
  late final _sftp_reply_handle = _sftp_reply_handlePtr
      .asFunction<int Function(sftp_client_message, ssh_string)>();

  ssh_string sftp_handle_alloc(
    sftp_session sftp,
    ffi.Pointer<ffi.Void> info,
  ) {
    return _sftp_handle_alloc(
      sftp,
      info,
    );
  }

  late final _sftp_handle_allocPtr = _lookup<
      ffi.NativeFunction<
          ssh_string Function(
              sftp_session, ffi.Pointer<ffi.Void>)>>('sftp_handle_alloc');
  late final _sftp_handle_alloc = _sftp_handle_allocPtr
      .asFunction<ssh_string Function(sftp_session, ffi.Pointer<ffi.Void>)>();

  int sftp_reply_attr(
    sftp_client_message msg,
    sftp_attributes attr,
  ) {
    return _sftp_reply_attr(
      msg,
      attr,
    );
  }

  late final _sftp_reply_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              sftp_client_message, sftp_attributes)>>('sftp_reply_attr');
  late final _sftp_reply_attr = _sftp_reply_attrPtr
      .asFunction<int Function(sftp_client_message, sftp_attributes)>();

  ffi.Pointer<ffi.Void> sftp_handle(
    sftp_session sftp,
    ssh_string handle,
  ) {
    return _sftp_handle(
      sftp,
      handle,
    );
  }

  late final _sftp_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              sftp_session, ssh_string)>>('sftp_handle');
  late final _sftp_handle = _sftp_handlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(sftp_session, ssh_string)>();

  int sftp_reply_status(
    sftp_client_message msg,
    int status,
    ffi.Pointer<ffi.Int8> message,
  ) {
    return _sftp_reply_status(
      msg,
      status,
      message,
    );
  }

  late final _sftp_reply_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_client_message, ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('sftp_reply_status');
  late final _sftp_reply_status = _sftp_reply_statusPtr.asFunction<
      int Function(sftp_client_message, int, ffi.Pointer<ffi.Int8>)>();

  int sftp_reply_names_add(
    sftp_client_message msg,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> longname,
    sftp_attributes attr,
  ) {
    return _sftp_reply_names_add(
      msg,
      file,
      longname,
      attr,
    );
  }

  late final _sftp_reply_names_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_client_message, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, sftp_attributes)>>('sftp_reply_names_add');
  late final _sftp_reply_names_add = _sftp_reply_names_addPtr.asFunction<
      int Function(sftp_client_message, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, sftp_attributes)>();

  int sftp_reply_names(
    sftp_client_message msg,
  ) {
    return _sftp_reply_names(
      msg,
    );
  }

  late final _sftp_reply_namesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sftp_client_message)>>(
          'sftp_reply_names');
  late final _sftp_reply_names =
      _sftp_reply_namesPtr.asFunction<int Function(sftp_client_message)>();

  int sftp_reply_data(
    sftp_client_message msg,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _sftp_reply_data(
      msg,
      data,
      len,
    );
  }

  late final _sftp_reply_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(sftp_client_message, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('sftp_reply_data');
  late final _sftp_reply_data = _sftp_reply_dataPtr.asFunction<
      int Function(sftp_client_message, ffi.Pointer<ffi.Void>, int)>();

  void sftp_handle_remove(
    sftp_session sftp,
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _sftp_handle_remove(
      sftp,
      handle,
    );
  }

  late final _sftp_handle_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              sftp_session, ffi.Pointer<ffi.Void>)>>('sftp_handle_remove');
  late final _sftp_handle_remove = _sftp_handle_removePtr
      .asFunction<void Function(sftp_session, ffi.Pointer<ffi.Void>)>();

  /*********************************** FIM SFTP **********************************************/

  /*********************************** INICIO CALLBACKS ****************************************** */
  /// @brief Set the session server callback functions.
  ///
  /// This functions sets the callback structure to use your own callback
  /// functions for user authentication, new channels and requests.
  ///
  /// @code
  /// struct ssh_server_callbacks_struct cb = {
  /// .userdata = data,
  /// .auth_password_function = my_auth_function
  /// };
  /// ssh_callbacks_init(&cb);
  /// ssh_set_server_callbacks(session, &cb);
  /// @endcode
  ///
  /// @param  session      The session to set the callback structure.
  ///
  /// @param  cb           The callback structure itself.
  ///
  /// @return SSH_OK on success, SSH_ERROR on error.
  int ssh_set_server_callbacks(
    int session,
    ssh_server_callbacks cb,
  ) {
    return _ssh_set_server_callbacks(
      session,
      cb,
    );
  }

  late final _ssh_set_server_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ssh_server_callbacks)>>('ssh_set_server_callbacks');
  late final _ssh_set_server_callbacks = _ssh_set_server_callbacksPtr
      .asFunction<int Function(int, ssh_server_callbacks)>();

  /// @brief Set the session callback functions.
  ///
  /// This functions sets the callback structure to use your own callback
  /// functions for auth, logging and status.
  ///
  /// @code
  /// struct ssh_callbacks_struct cb = {
  /// .userdata = data,
  /// .auth_function = my_auth_function
  /// };
  /// ssh_callbacks_init(&cb);
  /// ssh_set_callbacks(session, &cb);
  /// @endcode
  ///
  /// @param  session      The session to set the callback structure.
  ///
  /// @param  cb           The callback structure itself.
  ///
  /// @return SSH_OK on success, SSH_ERROR on error.
  int ssh_set_callbacks(
    int session,
    ssh_callbacks cb,
  ) {
    return _ssh_set_callbacks(
      session,
      cb,
    );
  }

  late final _ssh_set_callbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ssh_callbacks)>>(
          'ssh_set_callbacks');
  late final _ssh_set_callbacks =
      _ssh_set_callbacksPtr.asFunction<int Function(int, ssh_callbacks)>();

  /// @brief Set the channel callback functions.
  ///
  /// This functions sets the callback structure to use your own callback
  /// functions for channel data and exceptions
  ///
  /// @code
  /// struct ssh_channel_callbacks_struct cb = {
  /// .userdata = data,
  /// .channel_data_function = my_channel_data_function
  /// };
  /// ssh_callbacks_init(&cb);
  /// ssh_set_channel_callbacks(channel, &cb);
  /// @endcode
  ///
  /// @param  channel      The channel to set the callback structure.
  ///
  /// @param  cb           The callback structure itself.
  ///
  /// @return SSH_OK on success, SSH_ERROR on error.
  /// @warning this function will not replace existing callbacks but set the
  /// new one atop of them.
  int ssh_set_channel_callbacks(
    ffi.Pointer<ssh_channel> channel,
    ssh_channel_callbacks cb,
  ) {
    return _ssh_set_channel_callbacks(
      channel,
      cb,
    );
  }

  late final _ssh_set_channel_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ssh_channel>,
              ssh_channel_callbacks)>>('ssh_set_channel_callbacks');
  late final _ssh_set_channel_callbacks =
      _ssh_set_channel_callbacksPtr.asFunction<
          int Function(ffi.Pointer<ssh_channel>, ssh_channel_callbacks)>();

  /// @brief Add channel callback functions
  ///
  /// This function will add channel callback functions to the channel callback
  /// list.
  /// Callbacks missing from a callback structure will be probed in the next
  /// on the list.
  ///
  /// @param  channel      The channel to set the callback structure.
  ///
  /// @param  cb           The callback structure itself.
  ///
  /// @return SSH_OK on success, SSH_ERROR on error.
  ///
  /// @see ssh_set_channel_callbacks
  int ssh_add_channel_callbacks(
    ffi.Pointer<ssh_channel> channel,
    ssh_channel_callbacks cb,
  ) {
    return _ssh_add_channel_callbacks(
      channel,
      cb,
    );
  }

  late final _ssh_add_channel_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ssh_channel>,
              ssh_channel_callbacks)>>('ssh_add_channel_callbacks');
  late final _ssh_add_channel_callbacks =
      _ssh_add_channel_callbacksPtr.asFunction<
          int Function(ffi.Pointer<ssh_channel>, ssh_channel_callbacks)>();

  /// @brief Remove a channel callback.
  ///
  /// The channel has been added with ssh_add_channel_callbacks or
  /// ssh_set_channel_callbacks in this case.
  ///
  /// @param channel  The channel to remove the callback structure from.
  ///
  /// @param cb       The callback structure to remove
  ///
  /// @returns SSH_OK on success, SSH_ERROR on error.
  int ssh_remove_channel_callbacks(
    ffi.Pointer<ssh_channel> channel,
    ssh_channel_callbacks cb,
  ) {
    return _ssh_remove_channel_callbacks(
      channel,
      cb,
    );
  }

  late final _ssh_remove_channel_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ssh_channel>,
              ssh_channel_callbacks)>>('ssh_remove_channel_callbacks');
  late final _ssh_remove_channel_callbacks =
      _ssh_remove_channel_callbacksPtr.asFunction<
          int Function(ffi.Pointer<ssh_channel>, ssh_channel_callbacks)>();

  /// @brief Set the thread callbacks structure.
  ///
  /// This is necessary if your program is using libssh in a multithreaded fashion.
  /// This function must be called first, outside of any threading context (in your
  /// main() function for instance), before you call ssh_init().
  ///
  /// @param[in] cb   A pointer to a ssh_threads_callbacks_struct structure, which
  /// contains the different callbacks to be set.
  ///
  /// @returns        Always returns SSH_OK.
  ///
  /// @see ssh_threads_callbacks_struct
  /// @see SSH_THREADS_PTHREAD
  /// @bug libgcrypt 1.6 and bigger backend does not support custom callback.
  /// Using anything else than pthreads here will fail.
  int ssh_threads_set_callbacks(
    ffi.Pointer<ssh_threads_callbacks_struct> cb,
  ) {
    return _ssh_threads_set_callbacks(
      cb,
    );
  }

  late final _ssh_threads_set_callbacksPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ssh_threads_callbacks_struct>)>>(
      'ssh_threads_set_callbacks');
  late final _ssh_threads_set_callbacks = _ssh_threads_set_callbacksPtr
      .asFunction<int Function(ffi.Pointer<ssh_threads_callbacks_struct>)>();

  /// @brief Returns a pointer to the appropriate callbacks structure for the
  /// environment, to be used with ssh_threads_set_callbacks.
  ///
  /// @returns A pointer to a ssh_threads_callbacks_struct to be used with
  /// ssh_threads_set_callbacks.
  ///
  /// @see ssh_threads_set_callbacks
  ffi.Pointer<ffi.Int32> ssh_threads_get_default() {
    return _ssh_threads_get_default();
  }

  late final _ssh_threads_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'ssh_threads_get_default');
  late final _ssh_threads_get_default = _ssh_threads_get_defaultPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  /// @brief Returns a pointer on the pthread threads callbacks, to be used with
  /// ssh_threads_set_callbacks.
  ///
  /// @see ssh_threads_set_callbacks
  ffi.Pointer<ffi.Int32> ssh_threads_get_pthread() {
    return _ssh_threads_get_pthread();
  }

  late final _ssh_threads_get_pthreadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'ssh_threads_get_pthread');
  late final _ssh_threads_get_pthread = _ssh_threads_get_pthreadPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  /// @brief Get the noop threads callbacks structure
  ///
  /// This can be used with ssh_threads_set_callbacks. These callbacks do nothing
  /// and are being used by default.
  ///
  /// @return Always returns a valid pointer to the noop callbacks structure.
  ///
  /// @see ssh_threads_set_callbacks
  ffi.Pointer<ffi.Int32> ssh_threads_get_noop() {
    return _ssh_threads_get_noop();
  }

  late final _ssh_threads_get_noopPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'ssh_threads_get_noop');
  late final _ssh_threads_get_noop =
      _ssh_threads_get_noopPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  /// @brief Set the logging callback function.
  ///
  /// @param[in]  cb  The callback to set.
  ///
  /// @return         0 on success, < 0 on errror.
  int ssh_set_log_callback(
    ssh_logging_callback cb,
  ) {
    return _ssh_set_log_callback(
      cb,
    );
  }

  late final _ssh_set_log_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_logging_callback)>>(
          'ssh_set_log_callback');
  late final _ssh_set_log_callback =
      _ssh_set_log_callbackPtr.asFunction<int Function(ssh_logging_callback)>();

  /// @brief Get the pointer to the logging callback function.
  ///
  /// @return The pointer the the callback or NULL if none set.
  late final ffi.Pointer<ffi.Int32> _ssh_logging_callback1 =
      _lookup<ffi.Int32>('ssh_logging_callback');

  int get ssh_logging_callback1 => _ssh_logging_callback1.value;

  set ssh_logging_callback1(int value) => _ssh_logging_callback1.value = value;
  /*********************************** FIM CALLBACKS ****************************************** */

  int ssh_blocking_flush(
    ssh_session session,
    int timeout,
  ) {
    return _ssh_blocking_flush(
      session,
      timeout,
    );
  }

  late final _ssh_blocking_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session, ffi.Int32)>>(
          'ssh_blocking_flush');
  late final _ssh_blocking_flush =
      _ssh_blocking_flushPtr.asFunction<int Function(ssh_session, int)>();

  ssh_channel ssh_channel_accept_x11(
    ssh_channel channel,
    int timeout_ms,
  ) {
    return _ssh_channel_accept_x11(
      channel,
      timeout_ms,
    );
  }

  late final _ssh_channel_accept_x11Ptr =
      _lookup<ffi.NativeFunction<ssh_channel Function(ssh_channel, ffi.Int32)>>(
          'ssh_channel_accept_x11');
  late final _ssh_channel_accept_x11 = _ssh_channel_accept_x11Ptr
      .asFunction<ssh_channel Function(ssh_channel, int)>();

  int ssh_channel_change_pty_size(
    ssh_channel channel,
    int cols,
    int rows,
  ) {
    return _ssh_channel_change_pty_size(
      channel,
      cols,
      rows,
    );
  }

  late final _ssh_channel_change_pty_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Int32,
              ffi.Int32)>>('ssh_channel_change_pty_size');
  late final _ssh_channel_change_pty_size = _ssh_channel_change_pty_sizePtr
      .asFunction<int Function(ssh_channel, int, int)>();

  int ssh_channel_close(
    ssh_channel channel,
  ) {
    return _ssh_channel_close(
      channel,
    );
  }

  late final _ssh_channel_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_close');
  late final _ssh_channel_close =
      _ssh_channel_closePtr.asFunction<int Function(ssh_channel)>();

  void ssh_channel_free(
    ssh_channel channel,
  ) {
    return _ssh_channel_free(
      channel,
    );
  }

  late final _ssh_channel_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_channel)>>(
          'ssh_channel_free');
  late final _ssh_channel_free =
      _ssh_channel_freePtr.asFunction<void Function(ssh_channel)>();

  int ssh_channel_get_exit_status(
    ssh_channel channel,
  ) {
    return _ssh_channel_get_exit_status(
      channel,
    );
  }

  late final _ssh_channel_get_exit_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_get_exit_status');
  late final _ssh_channel_get_exit_status =
      _ssh_channel_get_exit_statusPtr.asFunction<int Function(ssh_channel)>();

  ssh_session ssh_channel_get_session(
    ssh_channel channel,
  ) {
    return _ssh_channel_get_session(
      channel,
    );
  }

  late final _ssh_channel_get_sessionPtr =
      _lookup<ffi.NativeFunction<ssh_session Function(ssh_channel)>>(
          'ssh_channel_get_session');
  late final _ssh_channel_get_session = _ssh_channel_get_sessionPtr
      .asFunction<ssh_session Function(ssh_channel)>();

  int ssh_channel_is_closed(
    ssh_channel channel,
  ) {
    return _ssh_channel_is_closed(
      channel,
    );
  }

  late final _ssh_channel_is_closedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_is_closed');
  late final _ssh_channel_is_closed =
      _ssh_channel_is_closedPtr.asFunction<int Function(ssh_channel)>();

  int ssh_channel_is_eof(
    ssh_channel channel,
  ) {
    return _ssh_channel_is_eof(
      channel,
    );
  }

  late final _ssh_channel_is_eofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_is_eof');
  late final _ssh_channel_is_eof =
      _ssh_channel_is_eofPtr.asFunction<int Function(ssh_channel)>();

  int ssh_channel_is_open(
    ssh_channel channel,
  ) {
    return _ssh_channel_is_open(
      channel,
    );
  }

  late final _ssh_channel_is_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_is_open');
  late final _ssh_channel_is_open =
      _ssh_channel_is_openPtr.asFunction<int Function(ssh_channel)>();

  ssh_channel ssh_channel_new(
    ssh_session session,
  ) {
    return _ssh_channel_new(
      session,
    );
  }

  late final _ssh_channel_newPtr =
      _lookup<ffi.NativeFunction<ssh_channel Function(ssh_session)>>(
          'ssh_channel_new');
  late final _ssh_channel_new =
      _ssh_channel_newPtr.asFunction<ssh_channel Function(ssh_session)>();

  int ssh_channel_open_auth_agent(
    ssh_channel channel,
  ) {
    return _ssh_channel_open_auth_agent(
      channel,
    );
  }

  late final _ssh_channel_open_auth_agentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_open_auth_agent');
  late final _ssh_channel_open_auth_agent =
      _ssh_channel_open_auth_agentPtr.asFunction<int Function(ssh_channel)>();

  int ssh_channel_open_forward(
    ssh_channel channel,
    ffi.Pointer<ffi.Int8> remotehost,
    int remoteport,
    ffi.Pointer<ffi.Int8> sourcehost,
    int localport,
  ) {
    return _ssh_channel_open_forward(
      channel,
      remotehost,
      remoteport,
      sourcehost,
      localport,
    );
  }

  late final _ssh_channel_open_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('ssh_channel_open_forward');
  late final _ssh_channel_open_forward =
      _ssh_channel_open_forwardPtr.asFunction<
          int Function(ssh_channel, ffi.Pointer<ffi.Int8>, int,
              ffi.Pointer<ffi.Int8>, int)>();

  int ssh_channel_open_forward_unix(
    ssh_channel channel,
    ffi.Pointer<ffi.Int8> remotepath,
    ffi.Pointer<ffi.Int8> sourcehost,
    int localport,
  ) {
    return _ssh_channel_open_forward_unix(
      channel,
      remotepath,
      sourcehost,
      localport,
    );
  }

  late final _ssh_channel_open_forward_unixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_channel,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('ssh_channel_open_forward_unix');
  late final _ssh_channel_open_forward_unix =
      _ssh_channel_open_forward_unixPtr.asFunction<
          int Function(ssh_channel, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, int)>();

  int ssh_channel_open_session(
    ssh_channel channel,
  ) {
    return _ssh_channel_open_session(
      channel,
    );
  }

  late final _ssh_channel_open_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_open_session');
  late final _ssh_channel_open_session =
      _ssh_channel_open_sessionPtr.asFunction<int Function(ssh_channel)>();

  int ssh_channel_open_x11(
    ssh_channel channel,
    ffi.Pointer<ffi.Int8> orig_addr,
    int orig_port,
  ) {
    return _ssh_channel_open_x11(
      channel,
      orig_addr,
      orig_port,
    );
  }

  late final _ssh_channel_open_x11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('ssh_channel_open_x11');
  late final _ssh_channel_open_x11 = _ssh_channel_open_x11Ptr
      .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Int8>, int)>();

  int ssh_channel_poll(
    ssh_channel channel,
    int is_stderr,
  ) {
    return _ssh_channel_poll(
      channel,
      is_stderr,
    );
  }

  late final _ssh_channel_pollPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel, ffi.Int32)>>(
          'ssh_channel_poll');
  late final _ssh_channel_poll =
      _ssh_channel_pollPtr.asFunction<int Function(ssh_channel, int)>();

  int ssh_channel_poll_timeout(
    ssh_channel channel,
    int timeout,
    int is_stderr,
  ) {
    return _ssh_channel_poll_timeout(
      channel,
      timeout,
      is_stderr,
    );
  }

  late final _ssh_channel_poll_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_channel, ffi.Int32, ffi.Int32)>>('ssh_channel_poll_timeout');
  late final _ssh_channel_poll_timeout = _ssh_channel_poll_timeoutPtr
      .asFunction<int Function(ssh_channel, int, int)>();

  int ssh_channel_read(
    ssh_channel channel,
    ffi.Pointer<ffi.Void> dest,
    int count,
    int is_stderr,
  ) {
    return _ssh_channel_read(
      channel,
      dest,
      count,
      is_stderr,
    );
  }

  late final _ssh_channel_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Int32)>>('ssh_channel_read');
  late final _ssh_channel_read = _ssh_channel_readPtr
      .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Void>, int, int)>();

  int ssh_channel_read_timeout(
    ssh_channel channel,
    ffi.Pointer<ffi.Void> dest,
    int count,
    int is_stderr,
    int timeout_ms,
  ) {
    return _ssh_channel_read_timeout(
      channel,
      dest,
      count,
      is_stderr,
      timeout_ms,
    );
  }

  late final _ssh_channel_read_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Int32, ffi.Int32)>>('ssh_channel_read_timeout');
  late final _ssh_channel_read_timeout =
      _ssh_channel_read_timeoutPtr.asFunction<
          int Function(ssh_channel, ffi.Pointer<ffi.Void>, int, int, int)>();

  int ssh_channel_read_nonblocking(
    ssh_channel channel,
    ffi.Pointer<ffi.Void> dest,
    int count,
    int is_stderr,
  ) {
    return _ssh_channel_read_nonblocking(
      channel,
      dest,
      count,
      is_stderr,
    );
  }

  late final _ssh_channel_read_nonblockingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Int32)>>('ssh_channel_read_nonblocking');
  late final _ssh_channel_read_nonblocking = _ssh_channel_read_nonblockingPtr
      .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Void>, int, int)>();

  int ssh_channel_request_env(
    ssh_channel channel,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _ssh_channel_request_env(
      channel,
      name,
      value,
    );
  }

  late final _ssh_channel_request_envPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('ssh_channel_request_env');
  late final _ssh_channel_request_env = _ssh_channel_request_envPtr.asFunction<
      int Function(
          ssh_channel, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int ssh_channel_request_exec(
    ssh_channel channel,
    ffi.Pointer<ffi.Int8> cmd,
  ) {
    return _ssh_channel_request_exec(
      channel,
      cmd,
    );
  }

  late final _ssh_channel_request_execPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_channel, ffi.Pointer<ffi.Int8>)>>('ssh_channel_request_exec');
  late final _ssh_channel_request_exec = _ssh_channel_request_execPtr
      .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Int8>)>();

  int ssh_channel_request_pty(
    ssh_channel channel,
  ) {
    return _ssh_channel_request_pty(
      channel,
    );
  }

  late final _ssh_channel_request_ptyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_request_pty');
  late final _ssh_channel_request_pty =
      _ssh_channel_request_ptyPtr.asFunction<int Function(ssh_channel)>();

  int ssh_channel_request_pty_size(
    ssh_channel channel,
    ffi.Pointer<ffi.Int8> term,
    int cols,
    int rows,
  ) {
    return _ssh_channel_request_pty_size(
      channel,
      term,
      cols,
      rows,
    );
  }

  late final _ssh_channel_request_pty_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Int32)>>('ssh_channel_request_pty_size');
  late final _ssh_channel_request_pty_size = _ssh_channel_request_pty_sizePtr
      .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Int8>, int, int)>();

  int ssh_channel_request_shell(
    ssh_channel channel,
  ) {
    return _ssh_channel_request_shell(
      channel,
    );
  }

  late final _ssh_channel_request_shellPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_request_shell');
  late final _ssh_channel_request_shell =
      _ssh_channel_request_shellPtr.asFunction<int Function(ssh_channel)>();

  int ssh_channel_request_send_signal(
    ssh_channel channel,
    ffi.Pointer<ffi.Int8> signum,
  ) {
    return _ssh_channel_request_send_signal(
      channel,
      signum,
    );
  }

  late final _ssh_channel_request_send_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel,
              ffi.Pointer<ffi.Int8>)>>('ssh_channel_request_send_signal');
  late final _ssh_channel_request_send_signal =
      _ssh_channel_request_send_signalPtr
          .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Int8>)>();

  int ssh_channel_request_send_break(
    ssh_channel channel,
    int length,
  ) {
    return _ssh_channel_request_send_break(
      channel,
      length,
    );
  }

  late final _ssh_channel_request_send_breakPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel, ffi.Uint32)>>(
          'ssh_channel_request_send_break');
  late final _ssh_channel_request_send_break =
      _ssh_channel_request_send_breakPtr
          .asFunction<int Function(ssh_channel, int)>();

  int ssh_channel_request_sftp(
    ssh_channel channel,
  ) {
    return _ssh_channel_request_sftp(
      channel,
    );
  }

  late final _ssh_channel_request_sftpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_request_sftp');
  late final _ssh_channel_request_sftp =
      _ssh_channel_request_sftpPtr.asFunction<int Function(ssh_channel)>();

  int ssh_channel_request_subsystem(
    ssh_channel channel,
    ffi.Pointer<ffi.Int8> subsystem,
  ) {
    return _ssh_channel_request_subsystem(
      channel,
      subsystem,
    );
  }

  late final _ssh_channel_request_subsystemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel,
              ffi.Pointer<ffi.Int8>)>>('ssh_channel_request_subsystem');
  late final _ssh_channel_request_subsystem = _ssh_channel_request_subsystemPtr
      .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Int8>)>();

  int ssh_channel_request_x11(
    ssh_channel channel,
    int single_connection,
    ffi.Pointer<ffi.Int8> protocol,
    ffi.Pointer<ffi.Int8> cookie,
    int screen_number,
  ) {
    return _ssh_channel_request_x11(
      channel,
      single_connection,
      protocol,
      cookie,
      screen_number,
    );
  }

  late final _ssh_channel_request_x11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('ssh_channel_request_x11');
  late final _ssh_channel_request_x11 = _ssh_channel_request_x11Ptr.asFunction<
      int Function(ssh_channel, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, int)>();

  int ssh_channel_request_auth_agent(
    ssh_channel channel,
  ) {
    return _ssh_channel_request_auth_agent(
      channel,
    );
  }

  late final _ssh_channel_request_auth_agentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_request_auth_agent');
  late final _ssh_channel_request_auth_agent =
      _ssh_channel_request_auth_agentPtr
          .asFunction<int Function(ssh_channel)>();

  int ssh_channel_send_eof(
    ssh_channel channel,
  ) {
    return _ssh_channel_send_eof(
      channel,
    );
  }

  late final _ssh_channel_send_eofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_channel)>>(
          'ssh_channel_send_eof');
  late final _ssh_channel_send_eof =
      _ssh_channel_send_eofPtr.asFunction<int Function(ssh_channel)>();

  int ssh_channel_select(
    ffi.Pointer<ssh_channel> readchans,
    ffi.Pointer<ssh_channel> writechans,
    ffi.Pointer<ssh_channel> exceptchans,
    ffi.Pointer<timeval> timeout,
  ) {
    return _ssh_channel_select(
      readchans,
      writechans,
      exceptchans,
      timeout,
    );
  }

  late final _ssh_channel_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ssh_channel>,
              ffi.Pointer<ssh_channel>,
              ffi.Pointer<ssh_channel>,
              ffi.Pointer<timeval>)>>('ssh_channel_select');
  late final _ssh_channel_select = _ssh_channel_selectPtr.asFunction<
      int Function(ffi.Pointer<ssh_channel>, ffi.Pointer<ssh_channel>,
          ffi.Pointer<ssh_channel>, ffi.Pointer<timeval>)>();

  void ssh_channel_set_blocking(
    ssh_channel channel,
    int blocking,
  ) {
    return _ssh_channel_set_blocking(
      channel,
      blocking,
    );
  }

  late final _ssh_channel_set_blockingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_channel, ffi.Int32)>>(
          'ssh_channel_set_blocking');
  late final _ssh_channel_set_blocking = _ssh_channel_set_blockingPtr
      .asFunction<void Function(ssh_channel, int)>();

  void ssh_channel_set_counter(
    ssh_channel channel,
    ssh_counter counter,
  ) {
    return _ssh_channel_set_counter(
      channel,
      counter,
    );
  }

  late final _ssh_channel_set_counterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_channel, ssh_counter)>>(
          'ssh_channel_set_counter');
  late final _ssh_channel_set_counter = _ssh_channel_set_counterPtr
      .asFunction<void Function(ssh_channel, ssh_counter)>();

  int ssh_channel_write(
    ssh_channel channel,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ssh_channel_write(
      channel,
      data,
      len,
    );
  }

  late final _ssh_channel_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('ssh_channel_write');
  late final _ssh_channel_write = _ssh_channel_writePtr
      .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Void>, int)>();

  int ssh_channel_write_stderr(
    ssh_channel channel,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ssh_channel_write_stderr(
      channel,
      data,
      len,
    );
  }

  late final _ssh_channel_write_stderrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_channel, ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('ssh_channel_write_stderr');
  late final _ssh_channel_write_stderr = _ssh_channel_write_stderrPtr
      .asFunction<int Function(ssh_channel, ffi.Pointer<ffi.Void>, int)>();

  int ssh_channel_window_size(
    ssh_channel channel,
  ) {
    return _ssh_channel_window_size(
      channel,
    );
  }

  late final _ssh_channel_window_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ssh_channel)>>(
          'ssh_channel_window_size');
  late final _ssh_channel_window_size =
      _ssh_channel_window_sizePtr.asFunction<int Function(ssh_channel)>();

  ffi.Pointer<ffi.Int8> ssh_basename(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _ssh_basename(
      path,
    );
  }

  late final _ssh_basenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('ssh_basename');
  late final _ssh_basename = _ssh_basenamePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  void ssh_clean_pubkey_hash(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> hash,
  ) {
    return _ssh_clean_pubkey_hash(
      hash,
    );
  }

  late final _ssh_clean_pubkey_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('ssh_clean_pubkey_hash');
  late final _ssh_clean_pubkey_hash = _ssh_clean_pubkey_hashPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int ssh_connect(
    ssh_session session,
  ) {
    return _ssh_connect(
      session,
    );
  }

  late final _ssh_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_connect');
  late final _ssh_connect =
      _ssh_connectPtr.asFunction<int Function(ssh_session)>();

  ssh_connector ssh_connector_new(
    ssh_session session,
  ) {
    return _ssh_connector_new(
      session,
    );
  }

  late final _ssh_connector_newPtr =
      _lookup<ffi.NativeFunction<ssh_connector Function(ssh_session)>>(
          'ssh_connector_new');
  late final _ssh_connector_new =
      _ssh_connector_newPtr.asFunction<ssh_connector Function(ssh_session)>();

  void ssh_connector_free(
    ssh_connector connector,
  ) {
    return _ssh_connector_free(
      connector,
    );
  }

  late final _ssh_connector_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_connector)>>(
          'ssh_connector_free');
  late final _ssh_connector_free =
      _ssh_connector_freePtr.asFunction<void Function(ssh_connector)>();

  int ssh_connector_set_in_channel(
    ssh_connector connector,
    ssh_channel channel,
    int flags,
  ) {
    return _ssh_connector_set_in_channel(
      connector,
      channel,
      flags,
    );
  }

  late final _ssh_connector_set_in_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_connector, ssh_channel,
              ffi.Int32)>>('ssh_connector_set_in_channel');
  late final _ssh_connector_set_in_channel = _ssh_connector_set_in_channelPtr
      .asFunction<int Function(ssh_connector, ssh_channel, int)>();

  int ssh_connector_set_out_channel(
    ssh_connector connector,
    ssh_channel channel,
    int flags,
  ) {
    return _ssh_connector_set_out_channel(
      connector,
      channel,
      flags,
    );
  }

  late final _ssh_connector_set_out_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_connector, ssh_channel,
              ffi.Int32)>>('ssh_connector_set_out_channel');
  late final _ssh_connector_set_out_channel = _ssh_connector_set_out_channelPtr
      .asFunction<int Function(ssh_connector, ssh_channel, int)>();

  void ssh_connector_set_in_fd(
    ssh_connector connector,
    int fd,
  ) {
    return _ssh_connector_set_in_fd(
      connector,
      fd,
    );
  }

  late final _ssh_connector_set_in_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_connector, socket_t)>>(
          'ssh_connector_set_in_fd');
  late final _ssh_connector_set_in_fd = _ssh_connector_set_in_fdPtr
      .asFunction<void Function(ssh_connector, int)>();

  void ssh_connector_set_out_fd(
    ssh_connector connector,
    int fd,
  ) {
    return _ssh_connector_set_out_fd(
      connector,
      fd,
    );
  }

  late final _ssh_connector_set_out_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_connector, socket_t)>>(
          'ssh_connector_set_out_fd');
  late final _ssh_connector_set_out_fd = _ssh_connector_set_out_fdPtr
      .asFunction<void Function(ssh_connector, int)>();

  ffi.Pointer<ffi.Int8> ssh_copyright() {
    return _ssh_copyright();
  }

  late final _ssh_copyrightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'ssh_copyright');
  late final _ssh_copyright =
      _ssh_copyrightPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  void ssh_disconnect(
    ssh_session session,
  ) {
    return _ssh_disconnect(
      session,
    );
  }

  late final _ssh_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_session)>>(
          'ssh_disconnect');
  late final _ssh_disconnect =
      _ssh_disconnectPtr.asFunction<void Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_dirname(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _ssh_dirname(
      path,
    );
  }

  late final _ssh_dirnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('ssh_dirname');
  late final _ssh_dirname = _ssh_dirnamePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int ssh_finalize() {
    return _ssh_finalize();
  }

  late final _ssh_finalizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('ssh_finalize');
  late final _ssh_finalize = _ssh_finalizePtr.asFunction<int Function()>();

  ssh_channel ssh_channel_accept_forward(
    ssh_session session,
    int timeout_ms,
    ffi.Pointer<ffi.Int32> destination_port,
  ) {
    return _ssh_channel_accept_forward(
      session,
      timeout_ms,
      destination_port,
    );
  }

  late final _ssh_channel_accept_forwardPtr = _lookup<
      ffi.NativeFunction<
          ssh_channel Function(ssh_session, ffi.Int32,
              ffi.Pointer<ffi.Int32>)>>('ssh_channel_accept_forward');
  late final _ssh_channel_accept_forward =
      _ssh_channel_accept_forwardPtr.asFunction<
          ssh_channel Function(ssh_session, int, ffi.Pointer<ffi.Int32>)>();

  int ssh_channel_cancel_forward(
    ssh_session session,
    ffi.Pointer<ffi.Int8> address,
    int port,
  ) {
    return _ssh_channel_cancel_forward(
      session,
      address,
      port,
    );
  }

  late final _ssh_channel_cancel_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('ssh_channel_cancel_forward');
  late final _ssh_channel_cancel_forward = _ssh_channel_cancel_forwardPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>, int)>();

  int ssh_channel_listen_forward(
    ssh_session session,
    ffi.Pointer<ffi.Int8> address,
    int port,
    ffi.Pointer<ffi.Int32> bound_port,
  ) {
    return _ssh_channel_listen_forward(
      session,
      address,
      port,
      bound_port,
    );
  }

  late final _ssh_channel_listen_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int32>)>>('ssh_channel_listen_forward');
  late final _ssh_channel_listen_forward =
      _ssh_channel_listen_forwardPtr.asFunction<
          int Function(ssh_session, ffi.Pointer<ffi.Int8>, int,
              ffi.Pointer<ffi.Int32>)>();

  void ssh_free(
    ssh_session session,
  ) {
    return _ssh_free(
      session,
    );
  }

  late final _ssh_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_session)>>('ssh_free');
  late final _ssh_free = _ssh_freePtr.asFunction<void Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_disconnect_message(
    ssh_session session,
  ) {
    return _ssh_get_disconnect_message(
      session,
    );
  }

  late final _ssh_get_disconnect_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_disconnect_message');
  late final _ssh_get_disconnect_message = _ssh_get_disconnect_messagePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_error(
    ffi.Pointer<ffi.Void> error,
  ) {
    return _ssh_get_error(
      error,
    );
  }

  late final _ssh_get_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Void>)>>('ssh_get_error');
  late final _ssh_get_error = _ssh_get_errorPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>();

  int ssh_get_error_code(
    ffi.Pointer<ffi.Void> error,
  ) {
    return _ssh_get_error_code(
      error,
    );
  }

  late final _ssh_get_error_codePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          'ssh_get_error_code');
  late final _ssh_get_error_code =
      _ssh_get_error_codePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int ssh_get_fd(
    ssh_session session,
  ) {
    return _ssh_get_fd(
      session,
    );
  }

  late final _ssh_get_fdPtr =
      _lookup<ffi.NativeFunction<socket_t Function(ssh_session)>>('ssh_get_fd');
  late final _ssh_get_fd =
      _ssh_get_fdPtr.asFunction<int Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_hexa(
    ffi.Pointer<ffi.Uint8> what,
    int len,
  ) {
    return _ssh_get_hexa(
      what,
      len,
    );
  }

  late final _ssh_get_hexaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Uint8>, size_t)>>('ssh_get_hexa');
  late final _ssh_get_hexa = _ssh_get_hexaPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Int8> ssh_get_issue_banner(
    ssh_session session,
  ) {
    return _ssh_get_issue_banner(
      session,
    );
  }

  late final _ssh_get_issue_bannerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_issue_banner');
  late final _ssh_get_issue_banner = _ssh_get_issue_bannerPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  int ssh_get_openssh_version(
    ssh_session session,
  ) {
    return _ssh_get_openssh_version(
      session,
    );
  }

  late final _ssh_get_openssh_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_get_openssh_version');
  late final _ssh_get_openssh_version =
      _ssh_get_openssh_versionPtr.asFunction<int Function(ssh_session)>();

  int ssh_get_server_publickey(
    ssh_session session,
    ffi.Pointer<ssh_key> key,
  ) {
    return _ssh_get_server_publickey(
      session,
      key,
    );
  }

  late final _ssh_get_server_publickeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ssh_key>)>>('ssh_get_server_publickey');
  late final _ssh_get_server_publickey = _ssh_get_server_publickeyPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ssh_key>)>();

  int ssh_get_publickey_hash(
    ssh_key key,
    int type,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> hash,
    ffi.Pointer<size_t> hlen,
  ) {
    return _ssh_get_publickey_hash(
      key,
      type,
      hash,
      hlen,
    );
  }

  late final _ssh_get_publickey_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_key,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<size_t>)>>('ssh_get_publickey_hash');
  late final _ssh_get_publickey_hash = _ssh_get_publickey_hashPtr.asFunction<
      int Function(ssh_key, int, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<size_t>)>();

  int ssh_get_pubkey_hash(
    ssh_session session,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> hash,
  ) {
    return _ssh_get_pubkey_hash(
      session,
      hash,
    );
  }

  late final _ssh_get_pubkey_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('ssh_get_pubkey_hash');
  late final _ssh_get_pubkey_hash = _ssh_get_pubkey_hashPtr.asFunction<
      int Function(ssh_session, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  ssh_channel ssh_forward_accept(
    ssh_session session,
    int timeout_ms,
  ) {
    return _ssh_forward_accept(
      session,
      timeout_ms,
    );
  }

  late final _ssh_forward_acceptPtr =
      _lookup<ffi.NativeFunction<ssh_channel Function(ssh_session, ffi.Int32)>>(
          'ssh_forward_accept');
  late final _ssh_forward_accept = _ssh_forward_acceptPtr
      .asFunction<ssh_channel Function(ssh_session, int)>();

  int ssh_forward_cancel(
    ssh_session session,
    ffi.Pointer<ffi.Int8> address,
    int port,
  ) {
    return _ssh_forward_cancel(
      session,
      address,
      port,
    );
  }

  late final _ssh_forward_cancelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('ssh_forward_cancel');
  late final _ssh_forward_cancel = _ssh_forward_cancelPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>, int)>();

  int ssh_forward_listen(
    ssh_session session,
    ffi.Pointer<ffi.Int8> address,
    int port,
    ffi.Pointer<ffi.Int32> bound_port,
  ) {
    return _ssh_forward_listen(
      session,
      address,
      port,
      bound_port,
    );
  }

  late final _ssh_forward_listenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int32>)>>('ssh_forward_listen');
  late final _ssh_forward_listen = _ssh_forward_listenPtr.asFunction<
      int Function(
          ssh_session, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int32>)>();

  int ssh_get_publickey(
    ssh_session session,
    ffi.Pointer<ssh_key> key,
  ) {
    return _ssh_get_publickey(
      session,
      key,
    );
  }

  late final _ssh_get_publickeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ssh_key>)>>('ssh_get_publickey');
  late final _ssh_get_publickey = _ssh_get_publickeyPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ssh_key>)>();

  int ssh_write_knownhost(
    ssh_session session,
  ) {
    return _ssh_write_knownhost(
      session,
    );
  }

  late final _ssh_write_knownhostPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_write_knownhost');
  late final _ssh_write_knownhost =
      _ssh_write_knownhostPtr.asFunction<int Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_dump_knownhost(
    ssh_session session,
  ) {
    return _ssh_dump_knownhost(
      session,
    );
  }

  late final _ssh_dump_knownhostPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_dump_knownhost');
  late final _ssh_dump_knownhost = _ssh_dump_knownhostPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  int ssh_is_server_known(
    ssh_session session,
  ) {
    return _ssh_is_server_known(
      session,
    );
  }

  late final _ssh_is_server_knownPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_is_server_known');
  late final _ssh_is_server_known =
      _ssh_is_server_knownPtr.asFunction<int Function(ssh_session)>();

  void ssh_print_hexa(
    ffi.Pointer<ffi.Int8> descr,
    ffi.Pointer<ffi.Uint8> what,
    int len,
  ) {
    return _ssh_print_hexa(
      descr,
      what,
      len,
    );
  }

  late final _ssh_print_hexaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>,
              size_t)>>('ssh_print_hexa');
  late final _ssh_print_hexa = _ssh_print_hexaPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>, int)>();

  int ssh_get_random(
    ffi.Pointer<ffi.Void> where,
    int len,
    int strong,
  ) {
    return _ssh_get_random(
      where,
      len,
      strong,
    );
  }

  late final _ssh_get_randomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>('ssh_get_random');
  late final _ssh_get_random = _ssh_get_randomPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int ssh_get_version(
    ssh_session session,
  ) {
    return _ssh_get_version(
      session,
    );
  }

  late final _ssh_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_get_version');
  late final _ssh_get_version =
      _ssh_get_versionPtr.asFunction<int Function(ssh_session)>();

  int ssh_get_status(
    ssh_session session,
  ) {
    return _ssh_get_status(
      session,
    );
  }

  late final _ssh_get_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_get_status');
  late final _ssh_get_status =
      _ssh_get_statusPtr.asFunction<int Function(ssh_session)>();

  int ssh_get_poll_flags(
    ssh_session session,
  ) {
    return _ssh_get_poll_flags(
      session,
    );
  }

  late final _ssh_get_poll_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_get_poll_flags');
  late final _ssh_get_poll_flags =
      _ssh_get_poll_flagsPtr.asFunction<int Function(ssh_session)>();

  int ssh_init() {
    return _ssh_init();
  }

  late final _ssh_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('ssh_init');
  late final _ssh_init = _ssh_initPtr.asFunction<int Function()>();

  int ssh_is_blocking(
    ssh_session session,
  ) {
    return _ssh_is_blocking(
      session,
    );
  }

  late final _ssh_is_blockingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_is_blocking');
  late final _ssh_is_blocking =
      _ssh_is_blockingPtr.asFunction<int Function(ssh_session)>();

  int ssh_is_connected(
    ssh_session session,
  ) {
    return _ssh_is_connected(
      session,
    );
  }

  late final _ssh_is_connectedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_is_connected');
  late final _ssh_is_connected =
      _ssh_is_connectedPtr.asFunction<int Function(ssh_session)>();

  void ssh_knownhosts_entry_free(
    ffi.Pointer<ssh_knownhosts_entry> entry,
  ) {
    return _ssh_knownhosts_entry_free(
      entry,
    );
  }

  late final _ssh_knownhosts_entry_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ssh_knownhosts_entry>)>>('ssh_knownhosts_entry_free');
  late final _ssh_knownhosts_entry_free = _ssh_knownhosts_entry_freePtr
      .asFunction<void Function(ffi.Pointer<ssh_knownhosts_entry>)>();

  int ssh_known_hosts_parse_line(
    ffi.Pointer<ffi.Int8> host,
    ffi.Pointer<ffi.Int8> line,
    ffi.Pointer<ffi.Pointer<ssh_knownhosts_entry>> entry,
  ) {
    return _ssh_known_hosts_parse_line(
      host,
      line,
      entry,
    );
  }

  late final _ssh_known_hosts_parse_linePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Pointer<ssh_knownhosts_entry>>)>>(
      'ssh_known_hosts_parse_line');
  late final _ssh_known_hosts_parse_line =
      _ssh_known_hosts_parse_linePtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ssh_knownhosts_entry>>)>();

  int ssh_session_has_known_hosts_entry(
    ssh_session session,
  ) {
    return _ssh_session_has_known_hosts_entry(
      session,
    );
  }

  late final _ssh_session_has_known_hosts_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_session_has_known_hosts_entry');
  late final _ssh_session_has_known_hosts_entry =
      _ssh_session_has_known_hosts_entryPtr
          .asFunction<int Function(ssh_session)>();

  int ssh_session_export_known_hosts_entry(
    ssh_session session,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pentry_string,
  ) {
    return _ssh_session_export_known_hosts_entry(
      session,
      pentry_string,
    );
  }

  late final _ssh_session_export_known_hosts_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ssh_session, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'ssh_session_export_known_hosts_entry');
  late final _ssh_session_export_known_hosts_entry =
      _ssh_session_export_known_hosts_entryPtr.asFunction<
          int Function(ssh_session, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int ssh_session_update_known_hosts(
    ssh_session session,
  ) {
    return _ssh_session_update_known_hosts(
      session,
    );
  }

  late final _ssh_session_update_known_hostsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_session_update_known_hosts');
  late final _ssh_session_update_known_hosts =
      _ssh_session_update_known_hostsPtr
          .asFunction<int Function(ssh_session)>();

  int ssh_session_get_known_hosts_entry(
    ssh_session session,
    ffi.Pointer<ffi.Pointer<ssh_knownhosts_entry>> pentry,
  ) {
    return _ssh_session_get_known_hosts_entry(
      session,
      pentry,
    );
  }

  late final _ssh_session_get_known_hosts_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ssh_session,
                  ffi.Pointer<ffi.Pointer<ssh_knownhosts_entry>>)>>(
      'ssh_session_get_known_hosts_entry');
  late final _ssh_session_get_known_hosts_entry =
      _ssh_session_get_known_hosts_entryPtr.asFunction<
          int Function(
              ssh_session, ffi.Pointer<ffi.Pointer<ssh_knownhosts_entry>>)>();

  int ssh_session_is_known_server(
    ssh_session session,
  ) {
    return _ssh_session_is_known_server(
      session,
    );
  }

  late final _ssh_session_is_known_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_session_is_known_server');
  late final _ssh_session_is_known_server =
      _ssh_session_is_known_serverPtr.asFunction<int Function(ssh_session)>();

  int ssh_set_log_level(
    int level,
  ) {
    return _ssh_set_log_level(
      level,
    );
  }

  late final _ssh_set_log_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'ssh_set_log_level');
  late final _ssh_set_log_level =
      _ssh_set_log_levelPtr.asFunction<int Function(int)>();

  int ssh_get_log_level() {
    return _ssh_get_log_level();
  }

  late final _ssh_get_log_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('ssh_get_log_level');
  late final _ssh_get_log_level =
      _ssh_get_log_levelPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> ssh_get_log_userdata() {
    return _ssh_get_log_userdata();
  }

  late final _ssh_get_log_userdataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'ssh_get_log_userdata');
  late final _ssh_get_log_userdata =
      _ssh_get_log_userdataPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int ssh_set_log_userdata(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _ssh_set_log_userdata(
      data,
    );
  }

  late final _ssh_set_log_userdataPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          'ssh_set_log_userdata');
  late final _ssh_set_log_userdata = _ssh_set_log_userdataPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /*void _ssh_log(
    int verbosity,
    ffi.Pointer<ffi.Int8> function,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return __ssh_log(
      verbosity,
      function,
      format,
    );
  }

  late final __ssh_logPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>(
          '_ssh_log');
  late final __ssh_log = __ssh_logPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();*/

  void ssh_log(
    ssh_session session,
    int prioriry,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _ssh_log1(
      session,
      prioriry,
      format,
    );
  }

  late final _ssh_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ssh_session, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('ssh_log');
  late final _ssh_log1 = _ssh_logPtr
      .asFunction<void Function(ssh_session, int, ffi.Pointer<ffi.Int8>)>();

  ssh_channel ssh_message_channel_request_open_reply_accept(
    ssh_message msg,
  ) {
    return _ssh_message_channel_request_open_reply_accept(
      msg,
    );
  }

  late final _ssh_message_channel_request_open_reply_acceptPtr =
      _lookup<ffi.NativeFunction<ssh_channel Function(ssh_message)>>(
          'ssh_message_channel_request_open_reply_accept');
  late final _ssh_message_channel_request_open_reply_accept =
      _ssh_message_channel_request_open_reply_acceptPtr
          .asFunction<ssh_channel Function(ssh_message)>();

  int ssh_message_channel_request_open_reply_accept_channel(
    ssh_message msg,
    ssh_channel chan,
  ) {
    return _ssh_message_channel_request_open_reply_accept_channel(
      msg,
      chan,
    );
  }

  late final _ssh_message_channel_request_open_reply_accept_channelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_message, ssh_channel)>>(
          'ssh_message_channel_request_open_reply_accept_channel');
  late final _ssh_message_channel_request_open_reply_accept_channel =
      _ssh_message_channel_request_open_reply_accept_channelPtr
          .asFunction<int Function(ssh_message, ssh_channel)>();

  int ssh_message_channel_request_reply_success(
    ssh_message msg,
  ) {
    return _ssh_message_channel_request_reply_success(
      msg,
    );
  }

  late final _ssh_message_channel_request_reply_successPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_message)>>(
          'ssh_message_channel_request_reply_success');
  late final _ssh_message_channel_request_reply_success =
      _ssh_message_channel_request_reply_successPtr
          .asFunction<int Function(ssh_message)>();

  void ssh_message_free(
    ssh_message msg,
  ) {
    return _ssh_message_free(
      msg,
    );
  }

  late final _ssh_message_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_message)>>(
          'ssh_message_free');
  late final _ssh_message_free =
      _ssh_message_freePtr.asFunction<void Function(ssh_message)>();

  ssh_message ssh_message_get(
    ssh_session session,
  ) {
    return _ssh_message_get(
      session,
    );
  }

  late final _ssh_message_getPtr =
      _lookup<ffi.NativeFunction<ssh_message Function(ssh_session)>>(
          'ssh_message_get');
  late final _ssh_message_get =
      _ssh_message_getPtr.asFunction<ssh_message Function(ssh_session)>();

  int ssh_message_subtype(
    ssh_message msg,
  ) {
    return _ssh_message_subtype(
      msg,
    );
  }

  late final _ssh_message_subtypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_message)>>(
          'ssh_message_subtype');
  late final _ssh_message_subtype =
      _ssh_message_subtypePtr.asFunction<int Function(ssh_message)>();

  int ssh_message_type(
    ssh_message msg,
  ) {
    return _ssh_message_type(
      msg,
    );
  }

  late final _ssh_message_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_message)>>(
          'ssh_message_type');
  late final _ssh_message_type =
      _ssh_message_typePtr.asFunction<int Function(ssh_message)>();

  int ssh_mkdir(
    ffi.Pointer<ffi.Int8> pathname,
    int mode,
  ) {
    return _ssh_mkdir(
      pathname,
      mode,
    );
  }

  late final _ssh_mkdirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, mode_t)>>('ssh_mkdir');
  late final _ssh_mkdir =
      _ssh_mkdirPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ssh_session ssh_new() {
    return _ssh_new();
  }

  late final _ssh_newPtr =
      _lookup<ffi.NativeFunction<ssh_session Function()>>('ssh_new');
  late final _ssh_new = _ssh_newPtr.asFunction<ssh_session Function()>();

  int ssh_options_copy(
    ssh_session src,
    ffi.Pointer<ssh_session> dest,
  ) {
    return _ssh_options_copy(
      src,
      dest,
    );
  }

  late final _ssh_options_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ssh_session>)>>('ssh_options_copy');
  late final _ssh_options_copy = _ssh_options_copyPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ssh_session>)>();

  int ssh_options_getopt(
    ssh_session session,
    ffi.Pointer<ffi.Int32> argcptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ) {
    return _ssh_options_getopt(
      session,
      argcptr,
      argv,
    );
  }

  late final _ssh_options_getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('ssh_options_getopt');
  late final _ssh_options_getopt = _ssh_options_getoptPtr.asFunction<
      int Function(ssh_session, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int ssh_options_parse_config(
    ssh_session session,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _ssh_options_parse_config(
      session,
      filename,
    );
  }

  late final _ssh_options_parse_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ffi.Int8>)>>('ssh_options_parse_config');
  late final _ssh_options_parse_config = _ssh_options_parse_configPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>)>();

  int ssh_options_set(
    ssh_session session,
    int type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _ssh_options_set(
      session,
      type,
      value,
    );
  }

  late final _ssh_options_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('ssh_options_set');
  late final _ssh_options_set = _ssh_options_setPtr
      .asFunction<int Function(ssh_session, int, ffi.Pointer<ffi.Void>)>();

  int ssh_options_get(
    ssh_session session,
    int type,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ) {
    return _ssh_options_get(
      session,
      type,
      value,
    );
  }

  late final _ssh_options_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('ssh_options_get');
  late final _ssh_options_get = _ssh_options_getPtr.asFunction<
      int Function(ssh_session, int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int ssh_options_get_port(
    ssh_session session,
    ffi.Pointer<ffi.Uint32> port_target,
  ) {
    return _ssh_options_get_port(
      session,
      port_target,
    );
  }

  late final _ssh_options_get_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ffi.Uint32>)>>('ssh_options_get_port');
  late final _ssh_options_get_port = _ssh_options_get_portPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Uint32>)>();

  int ssh_pcap_file_close(
    ssh_pcap_file pcap,
  ) {
    return _ssh_pcap_file_close(
      pcap,
    );
  }

  late final _ssh_pcap_file_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_pcap_file)>>(
          'ssh_pcap_file_close');
  late final _ssh_pcap_file_close =
      _ssh_pcap_file_closePtr.asFunction<int Function(ssh_pcap_file)>();

  void ssh_pcap_file_free(
    ssh_pcap_file pcap,
  ) {
    return _ssh_pcap_file_free(
      pcap,
    );
  }

  late final _ssh_pcap_file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_pcap_file)>>(
          'ssh_pcap_file_free');
  late final _ssh_pcap_file_free =
      _ssh_pcap_file_freePtr.asFunction<void Function(ssh_pcap_file)>();

  ssh_pcap_file ssh_pcap_file_new() {
    return _ssh_pcap_file_new();
  }

  late final _ssh_pcap_file_newPtr =
      _lookup<ffi.NativeFunction<ssh_pcap_file Function()>>(
          'ssh_pcap_file_new');
  late final _ssh_pcap_file_new =
      _ssh_pcap_file_newPtr.asFunction<ssh_pcap_file Function()>();

  int ssh_pcap_file_open(
    ssh_pcap_file pcap,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _ssh_pcap_file_open(
      pcap,
      filename,
    );
  }

  late final _ssh_pcap_file_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_pcap_file, ffi.Pointer<ffi.Int8>)>>('ssh_pcap_file_open');
  late final _ssh_pcap_file_open = _ssh_pcap_file_openPtr
      .asFunction<int Function(ssh_pcap_file, ffi.Pointer<ffi.Int8>)>();

  /// @}
  ssh_key ssh_key_new() {
    return _ssh_key_new();
  }

  late final _ssh_key_newPtr =
      _lookup<ffi.NativeFunction<ssh_key Function()>>('ssh_key_new');
  late final _ssh_key_new = _ssh_key_newPtr.asFunction<ssh_key Function()>();

  void ssh_key_free(
    ssh_key key,
  ) {
    return _ssh_key_free(
      key,
    );
  }

  late final _ssh_key_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_key)>>('ssh_key_free');
  late final _ssh_key_free =
      _ssh_key_freePtr.asFunction<void Function(ssh_key)>();

  int ssh_key_type(
    ssh_key key,
  ) {
    return _ssh_key_type(
      key,
    );
  }

  late final _ssh_key_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_key)>>('ssh_key_type');
  late final _ssh_key_type =
      _ssh_key_typePtr.asFunction<int Function(ssh_key)>();

  ffi.Pointer<ffi.Int8> ssh_key_type_to_char(
    int type,
  ) {
    return _ssh_key_type_to_char(
      type,
    );
  }

  late final _ssh_key_type_to_charPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'ssh_key_type_to_char');
  late final _ssh_key_type_to_char = _ssh_key_type_to_charPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int ssh_key_type_from_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _ssh_key_type_from_name(
      name,
    );
  }

  late final _ssh_key_type_from_namePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'ssh_key_type_from_name');
  late final _ssh_key_type_from_name = _ssh_key_type_from_namePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int ssh_key_is_public(
    ssh_key k,
  ) {
    return _ssh_key_is_public(
      k,
    );
  }

  late final _ssh_key_is_publicPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_key)>>(
          'ssh_key_is_public');
  late final _ssh_key_is_public =
      _ssh_key_is_publicPtr.asFunction<int Function(ssh_key)>();

  int ssh_key_is_private(
    ssh_key k,
  ) {
    return _ssh_key_is_private(
      k,
    );
  }

  late final _ssh_key_is_privatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_key)>>(
          'ssh_key_is_private');
  late final _ssh_key_is_private =
      _ssh_key_is_privatePtr.asFunction<int Function(ssh_key)>();

  int ssh_key_cmp(
    ssh_key k1,
    ssh_key k2,
    int what,
  ) {
    return _ssh_key_cmp(
      k1,
      k2,
      what,
    );
  }

  late final _ssh_key_cmpPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ssh_key, ssh_key, ffi.Int32)>>(
      'ssh_key_cmp');
  late final _ssh_key_cmp =
      _ssh_key_cmpPtr.asFunction<int Function(ssh_key, ssh_key, int)>();

  int ssh_pki_generate(
    int type,
    int parameter,
    ffi.Pointer<ssh_key> pkey,
  ) {
    return _ssh_pki_generate(
      type,
      parameter,
      pkey,
    );
  }

  late final _ssh_pki_generatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Pointer<ssh_key>)>>('ssh_pki_generate');
  late final _ssh_pki_generate = _ssh_pki_generatePtr
      .asFunction<int Function(int, int, ffi.Pointer<ssh_key>)>();

  int ssh_pki_import_privkey_base64(
    ffi.Pointer<ffi.Int8> b64_key,
    ffi.Pointer<ffi.Int8> passphrase,
    ssh_auth_callback auth_fn,
    ffi.Pointer<ffi.Void> auth_data,
    ffi.Pointer<ssh_key> pkey,
  ) {
    return _ssh_pki_import_privkey_base64(
      b64_key,
      passphrase,
      auth_fn,
      auth_data,
      pkey,
    );
  }

  late final _ssh_pki_import_privkey_base64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ssh_auth_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ssh_key>)>>('ssh_pki_import_privkey_base64');
  late final _ssh_pki_import_privkey_base64 =
      _ssh_pki_import_privkey_base64Ptr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ssh_auth_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ssh_key>)>();

  int ssh_pki_export_privkey_base64(
    ssh_key privkey,
    ffi.Pointer<ffi.Int8> passphrase,
    ssh_auth_callback auth_fn,
    ffi.Pointer<ffi.Void> auth_data,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> b64_key,
  ) {
    return _ssh_pki_export_privkey_base64(
      privkey,
      passphrase,
      auth_fn,
      auth_data,
      b64_key,
    );
  }

  late final _ssh_pki_export_privkey_base64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ssh_key,
                  ffi.Pointer<ffi.Int8>,
                  ssh_auth_callback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'ssh_pki_export_privkey_base64');
  late final _ssh_pki_export_privkey_base64 =
      _ssh_pki_export_privkey_base64Ptr.asFunction<
          int Function(ssh_key, ffi.Pointer<ffi.Int8>, ssh_auth_callback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int ssh_pki_import_privkey_file(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> passphrase,
    ssh_auth_callback auth_fn,
    ffi.Pointer<ffi.Void> auth_data,
    ffi.Pointer<ssh_key> pkey,
  ) {
    return _ssh_pki_import_privkey_file(
      filename,
      passphrase,
      auth_fn,
      auth_data,
      pkey,
    );
  }

  late final _ssh_pki_import_privkey_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ssh_auth_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ssh_key>)>>('ssh_pki_import_privkey_file');
  late final _ssh_pki_import_privkey_file =
      _ssh_pki_import_privkey_filePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ssh_auth_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ssh_key>)>();

  int ssh_pki_export_privkey_file(
    ssh_key privkey,
    ffi.Pointer<ffi.Int8> passphrase,
    ssh_auth_callback auth_fn,
    ffi.Pointer<ffi.Void> auth_data,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _ssh_pki_export_privkey_file(
      privkey,
      passphrase,
      auth_fn,
      auth_data,
      filename,
    );
  }

  late final _ssh_pki_export_privkey_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_key,
              ffi.Pointer<ffi.Int8>,
              ssh_auth_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int8>)>>('ssh_pki_export_privkey_file');
  late final _ssh_pki_export_privkey_file =
      _ssh_pki_export_privkey_filePtr.asFunction<
          int Function(ssh_key, ffi.Pointer<ffi.Int8>, ssh_auth_callback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>)>();

  int ssh_pki_copy_cert_to_privkey(
    ssh_key cert_key,
    ssh_key privkey,
  ) {
    return _ssh_pki_copy_cert_to_privkey(
      cert_key,
      privkey,
    );
  }

  late final _ssh_pki_copy_cert_to_privkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_key, ssh_key)>>(
          'ssh_pki_copy_cert_to_privkey');
  late final _ssh_pki_copy_cert_to_privkey = _ssh_pki_copy_cert_to_privkeyPtr
      .asFunction<int Function(ssh_key, ssh_key)>();

  int ssh_pki_import_pubkey_base64(
    ffi.Pointer<ffi.Int8> b64_key,
    int type,
    ffi.Pointer<ssh_key> pkey,
  ) {
    return _ssh_pki_import_pubkey_base64(
      b64_key,
      type,
      pkey,
    );
  }

  late final _ssh_pki_import_pubkey_base64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ssh_key>)>>('ssh_pki_import_pubkey_base64');
  late final _ssh_pki_import_pubkey_base64 =
      _ssh_pki_import_pubkey_base64Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ssh_key>)>();

  int ssh_pki_import_pubkey_file(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ssh_key> pkey,
  ) {
    return _ssh_pki_import_pubkey_file(
      filename,
      pkey,
    );
  }

  late final _ssh_pki_import_pubkey_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ssh_key>)>>('ssh_pki_import_pubkey_file');
  late final _ssh_pki_import_pubkey_file = _ssh_pki_import_pubkey_filePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ssh_key>)>();

  int ssh_pki_import_cert_base64(
    ffi.Pointer<ffi.Int8> b64_cert,
    int type,
    ffi.Pointer<ssh_key> pkey,
  ) {
    return _ssh_pki_import_cert_base64(
      b64_cert,
      type,
      pkey,
    );
  }

  late final _ssh_pki_import_cert_base64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ssh_key>)>>('ssh_pki_import_cert_base64');
  late final _ssh_pki_import_cert_base64 =
      _ssh_pki_import_cert_base64Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ssh_key>)>();

  int ssh_pki_import_cert_file(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ssh_key> pkey,
  ) {
    return _ssh_pki_import_cert_file(
      filename,
      pkey,
    );
  }

  late final _ssh_pki_import_cert_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ssh_key>)>>('ssh_pki_import_cert_file');
  late final _ssh_pki_import_cert_file = _ssh_pki_import_cert_filePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ssh_key>)>();

  int ssh_pki_export_privkey_to_pubkey(
    ssh_key privkey,
    ffi.Pointer<ssh_key> pkey,
  ) {
    return _ssh_pki_export_privkey_to_pubkey(
      privkey,
      pkey,
    );
  }

  late final _ssh_pki_export_privkey_to_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_key,
              ffi.Pointer<ssh_key>)>>('ssh_pki_export_privkey_to_pubkey');
  late final _ssh_pki_export_privkey_to_pubkey =
      _ssh_pki_export_privkey_to_pubkeyPtr
          .asFunction<int Function(ssh_key, ffi.Pointer<ssh_key>)>();

  int ssh_pki_export_pubkey_base64(
    ssh_key key,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> b64_key,
  ) {
    return _ssh_pki_export_pubkey_base64(
      key,
      b64_key,
    );
  }

  late final _ssh_pki_export_pubkey_base64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ssh_key, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'ssh_pki_export_pubkey_base64');
  late final _ssh_pki_export_pubkey_base64 = _ssh_pki_export_pubkey_base64Ptr
      .asFunction<int Function(ssh_key, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int ssh_pki_export_pubkey_file(
    ssh_key key,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _ssh_pki_export_pubkey_file(
      key,
      filename,
    );
  }

  late final _ssh_pki_export_pubkey_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_key, ffi.Pointer<ffi.Int8>)>>('ssh_pki_export_pubkey_file');
  late final _ssh_pki_export_pubkey_file = _ssh_pki_export_pubkey_filePtr
      .asFunction<int Function(ssh_key, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ssh_pki_key_ecdsa_name(
    ssh_key key,
  ) {
    return _ssh_pki_key_ecdsa_name(
      key,
    );
  }

  late final _ssh_pki_key_ecdsa_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_key)>>(
          'ssh_pki_key_ecdsa_name');
  late final _ssh_pki_key_ecdsa_name = _ssh_pki_key_ecdsa_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_key)>();

  ffi.Pointer<ffi.Int8> ssh_get_fingerprint_hash(
    int type,
    ffi.Pointer<ffi.Uint8> hash,
    int len,
  ) {
    return _ssh_get_fingerprint_hash(
      type,
      hash,
      len,
    );
  }

  late final _ssh_get_fingerprint_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              size_t)>>('ssh_get_fingerprint_hash');
  late final _ssh_get_fingerprint_hash =
      _ssh_get_fingerprint_hashPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  void ssh_print_hash(
    int type,
    ffi.Pointer<ffi.Uint8> hash,
    int len,
  ) {
    return _ssh_print_hash(
      type,
      hash,
      len,
    );
  }

  late final _ssh_print_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32, ffi.Pointer<ffi.Uint8>, size_t)>>('ssh_print_hash');
  late final _ssh_print_hash = _ssh_print_hashPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  int ssh_send_ignore(
    ssh_session session,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _ssh_send_ignore(
      session,
      data,
    );
  }

  late final _ssh_send_ignorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ffi.Int8>)>>('ssh_send_ignore');
  late final _ssh_send_ignore = _ssh_send_ignorePtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>)>();

  int ssh_send_debug(
    ssh_session session,
    ffi.Pointer<ffi.Int8> message,
    int always_display,
  ) {
    return _ssh_send_debug(
      session,
      message,
      always_display,
    );
  }

  late final _ssh_send_debugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('ssh_send_debug');
  late final _ssh_send_debug = _ssh_send_debugPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>, int)>();

  void ssh_gssapi_set_creds(
    ssh_session session,
    ssh_gssapi_creds creds,
  ) {
    return _ssh_gssapi_set_creds(
      session,
      creds,
    );
  }

  late final _ssh_gssapi_set_credsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ssh_session, ssh_gssapi_creds)>>(
      'ssh_gssapi_set_creds');
  late final _ssh_gssapi_set_creds = _ssh_gssapi_set_credsPtr
      .asFunction<void Function(ssh_session, ssh_gssapi_creds)>();

  int ssh_scp_accept_request(
    ssh_scp scp,
  ) {
    return _ssh_scp_accept_request(
      scp,
    );
  }

  late final _ssh_scp_accept_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_scp)>>(
          'ssh_scp_accept_request');
  late final _ssh_scp_accept_request =
      _ssh_scp_accept_requestPtr.asFunction<int Function(ssh_scp)>();

  int ssh_scp_close(
    ssh_scp scp,
  ) {
    return _ssh_scp_close(
      scp,
    );
  }

  late final _ssh_scp_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_scp)>>('ssh_scp_close');
  late final _ssh_scp_close =
      _ssh_scp_closePtr.asFunction<int Function(ssh_scp)>();

  int ssh_scp_deny_request(
    ssh_scp scp,
    ffi.Pointer<ffi.Int8> reason,
  ) {
    return _ssh_scp_deny_request(
      scp,
      reason,
    );
  }

  late final _ssh_scp_deny_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_scp, ffi.Pointer<ffi.Int8>)>>('ssh_scp_deny_request');
  late final _ssh_scp_deny_request = _ssh_scp_deny_requestPtr
      .asFunction<int Function(ssh_scp, ffi.Pointer<ffi.Int8>)>();

  void ssh_scp_free(
    ssh_scp scp,
  ) {
    return _ssh_scp_free(
      scp,
    );
  }

  late final _ssh_scp_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_scp)>>('ssh_scp_free');
  late final _ssh_scp_free =
      _ssh_scp_freePtr.asFunction<void Function(ssh_scp)>();

  int ssh_scp_init(
    ssh_scp scp,
  ) {
    return _ssh_scp_init(
      scp,
    );
  }

  late final _ssh_scp_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_scp)>>('ssh_scp_init');
  late final _ssh_scp_init =
      _ssh_scp_initPtr.asFunction<int Function(ssh_scp)>();

  int ssh_scp_leave_directory(
    ssh_scp scp,
  ) {
    return _ssh_scp_leave_directory(
      scp,
    );
  }

  late final _ssh_scp_leave_directoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_scp)>>(
          'ssh_scp_leave_directory');
  late final _ssh_scp_leave_directory =
      _ssh_scp_leave_directoryPtr.asFunction<int Function(ssh_scp)>();

  ssh_scp ssh_scp_new(
    ssh_session session,
    int mode,
    ffi.Pointer<ffi.Int8> location,
  ) {
    return _ssh_scp_new(
      session,
      mode,
      location,
    );
  }

  late final _ssh_scp_newPtr = _lookup<
      ffi.NativeFunction<
          ssh_scp Function(
              ssh_session, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('ssh_scp_new');
  late final _ssh_scp_new = _ssh_scp_newPtr
      .asFunction<ssh_scp Function(ssh_session, int, ffi.Pointer<ffi.Int8>)>();

  int ssh_scp_pull_request(
    ssh_scp scp,
  ) {
    return _ssh_scp_pull_request(
      scp,
    );
  }

  late final _ssh_scp_pull_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_scp)>>(
          'ssh_scp_pull_request');
  late final _ssh_scp_pull_request =
      _ssh_scp_pull_requestPtr.asFunction<int Function(ssh_scp)>();

  int ssh_scp_push_directory(
    ssh_scp scp,
    ffi.Pointer<ffi.Int8> dirname,
    int mode,
  ) {
    return _ssh_scp_push_directory(
      scp,
      dirname,
      mode,
    );
  }

  late final _ssh_scp_push_directoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_scp, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('ssh_scp_push_directory');
  late final _ssh_scp_push_directory = _ssh_scp_push_directoryPtr
      .asFunction<int Function(ssh_scp, ffi.Pointer<ffi.Int8>, int)>();

  int ssh_scp_push_file(
    ssh_scp scp,
    ffi.Pointer<ffi.Int8> filename,
    int size,
    int perms,
  ) {
    return _ssh_scp_push_file(
      scp,
      filename,
      size,
      perms,
    );
  }

  late final _ssh_scp_push_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_scp, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Int32)>>('ssh_scp_push_file');
  late final _ssh_scp_push_file = _ssh_scp_push_filePtr
      .asFunction<int Function(ssh_scp, ffi.Pointer<ffi.Int8>, int, int)>();

  int ssh_scp_push_file64(
    ssh_scp scp,
    ffi.Pointer<ffi.Int8> filename,
    int size,
    int perms,
  ) {
    return _ssh_scp_push_file64(
      scp,
      filename,
      size,
      perms,
    );
  }

  late final _ssh_scp_push_file64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_scp, ffi.Pointer<ffi.Int8>, ffi.Uint64,
              ffi.Int32)>>('ssh_scp_push_file64');
  late final _ssh_scp_push_file64 = _ssh_scp_push_file64Ptr
      .asFunction<int Function(ssh_scp, ffi.Pointer<ffi.Int8>, int, int)>();

  int ssh_scp_read(
    ssh_scp scp,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _ssh_scp_read(
      scp,
      buffer,
      size,
    );
  }

  late final _ssh_scp_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_scp, ffi.Pointer<ffi.Void>, size_t)>>('ssh_scp_read');
  late final _ssh_scp_read = _ssh_scp_readPtr
      .asFunction<int Function(ssh_scp, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Int8> ssh_scp_request_get_filename(
    ssh_scp scp,
  ) {
    return _ssh_scp_request_get_filename(
      scp,
    );
  }

  late final _ssh_scp_request_get_filenamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_scp)>>(
          'ssh_scp_request_get_filename');
  late final _ssh_scp_request_get_filename = _ssh_scp_request_get_filenamePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_scp)>();

/**
 * @brief Convert a scp text mode to an integer.
 *
 * @param[in]  mode     The mode to convert, e.g. "0644".
 *
 * @returns             An integer value, e.g. 420 for "0644".
 */
  int ssh_scp_request_get_permissions(
    ssh_scp scp,
  ) {
    return _ssh_scp_request_get_permissions(
      scp,
    );
  }

  late final _ssh_scp_request_get_permissionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_scp)>>(
          'ssh_scp_request_get_permissions');
  late final _ssh_scp_request_get_permissions =
      _ssh_scp_request_get_permissionsPtr.asFunction<int Function(ssh_scp)>();

  int ssh_scp_request_get_size(
    ssh_scp scp,
  ) {
    return _ssh_scp_request_get_size(
      scp,
    );
  }

  late final _ssh_scp_request_get_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ssh_scp)>>(
          'ssh_scp_request_get_size');
  late final _ssh_scp_request_get_size =
      _ssh_scp_request_get_sizePtr.asFunction<int Function(ssh_scp)>();

  int ssh_scp_request_get_size64(
    ssh_scp scp,
  ) {
    return _ssh_scp_request_get_size64(
      scp,
    );
  }

  late final _ssh_scp_request_get_size64Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ssh_scp)>>(
          'ssh_scp_request_get_size64');
  late final _ssh_scp_request_get_size64 =
      _ssh_scp_request_get_size64Ptr.asFunction<int Function(ssh_scp)>();

  ffi.Pointer<ffi.Int8> ssh_scp_request_get_warning(
    ssh_scp scp,
  ) {
    return _ssh_scp_request_get_warning(
      scp,
    );
  }

  late final _ssh_scp_request_get_warningPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_scp)>>(
          'ssh_scp_request_get_warning');
  late final _ssh_scp_request_get_warning = _ssh_scp_request_get_warningPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_scp)>();

  int ssh_scp_write(
    ssh_scp scp,
    ffi.Pointer<ffi.Void> buffer,
    int len,
  ) {
    return _ssh_scp_write(
      scp,
      buffer,
      len,
    );
  }

  late final _ssh_scp_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_scp, ffi.Pointer<ffi.Void>, size_t)>>('ssh_scp_write');
  late final _ssh_scp_write = _ssh_scp_writePtr
      .asFunction<int Function(ssh_scp, ffi.Pointer<ffi.Void>, int)>();

  int ssh_select(
    ffi.Pointer<ssh_channel> channels,
    ffi.Pointer<ssh_channel> outchannels,
    int maxfd,
    ffi.Pointer<fd_set> readfds,
    ffi.Pointer<timeval> timeout,
  ) {
    return _ssh_select(
      channels,
      outchannels,
      maxfd,
      readfds,
      timeout,
    );
  }

  late final _ssh_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ssh_channel>,
              ffi.Pointer<ssh_channel>,
              socket_t,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timeval>)>>('ssh_select');
  late final _ssh_select = _ssh_selectPtr.asFunction<
      int Function(ffi.Pointer<ssh_channel>, ffi.Pointer<ssh_channel>, int,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int ssh_service_request(
    ssh_session session,
    ffi.Pointer<ffi.Int8> service,
  ) {
    return _ssh_service_request(
      session,
      service,
    );
  }

  late final _ssh_service_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ffi.Int8>)>>('ssh_service_request');
  late final _ssh_service_request = _ssh_service_requestPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>)>();

  int ssh_set_agent_channel(
    ssh_session session,
    ssh_channel channel,
  ) {
    return _ssh_set_agent_channel(
      session,
      channel,
    );
  }

  late final _ssh_set_agent_channelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session, ssh_channel)>>(
          'ssh_set_agent_channel');
  late final _ssh_set_agent_channel = _ssh_set_agent_channelPtr
      .asFunction<int Function(ssh_session, ssh_channel)>();

  int ssh_set_agent_socket(
    ssh_session session,
    int fd,
  ) {
    return _ssh_set_agent_socket(
      session,
      fd,
    );
  }

  late final _ssh_set_agent_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session, socket_t)>>(
          'ssh_set_agent_socket');
  late final _ssh_set_agent_socket =
      _ssh_set_agent_socketPtr.asFunction<int Function(ssh_session, int)>();

  void ssh_set_blocking(
    ssh_session session,
    int blocking,
  ) {
    return _ssh_set_blocking(
      session,
      blocking,
    );
  }

  late final _ssh_set_blockingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_session, ffi.Int32)>>(
          'ssh_set_blocking');
  late final _ssh_set_blocking =
      _ssh_set_blockingPtr.asFunction<void Function(ssh_session, int)>();

  void ssh_set_counters(
    ssh_session session,
    ssh_counter scounter,
    ssh_counter rcounter,
  ) {
    return _ssh_set_counters(
      session,
      scounter,
      rcounter,
    );
  }

  late final _ssh_set_countersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ssh_session, ssh_counter, ssh_counter)>>('ssh_set_counters');
  late final _ssh_set_counters = _ssh_set_countersPtr
      .asFunction<void Function(ssh_session, ssh_counter, ssh_counter)>();

  void ssh_set_fd_except(
    ssh_session session,
  ) {
    return _ssh_set_fd_except(
      session,
    );
  }

  late final _ssh_set_fd_exceptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_session)>>(
          'ssh_set_fd_except');
  late final _ssh_set_fd_except =
      _ssh_set_fd_exceptPtr.asFunction<void Function(ssh_session)>();

  void ssh_set_fd_toread(
    ssh_session session,
  ) {
    return _ssh_set_fd_toread(
      session,
    );
  }

  late final _ssh_set_fd_toreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_session)>>(
          'ssh_set_fd_toread');
  late final _ssh_set_fd_toread =
      _ssh_set_fd_toreadPtr.asFunction<void Function(ssh_session)>();

  void ssh_set_fd_towrite(
    ssh_session session,
  ) {
    return _ssh_set_fd_towrite(
      session,
    );
  }

  late final _ssh_set_fd_towritePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_session)>>(
          'ssh_set_fd_towrite');
  late final _ssh_set_fd_towrite =
      _ssh_set_fd_towritePtr.asFunction<void Function(ssh_session)>();

  void ssh_silent_disconnect(
    ssh_session session,
  ) {
    return _ssh_silent_disconnect(
      session,
    );
  }

  late final _ssh_silent_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_session)>>(
          'ssh_silent_disconnect');
  late final _ssh_silent_disconnect =
      _ssh_silent_disconnectPtr.asFunction<void Function(ssh_session)>();

  int ssh_set_pcap_file(
    ssh_session session,
    ssh_pcap_file pcapfile,
  ) {
    return _ssh_set_pcap_file(
      session,
      pcapfile,
    );
  }

  late final _ssh_set_pcap_filePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ssh_session, ssh_pcap_file)>>(
      'ssh_set_pcap_file');
  late final _ssh_set_pcap_file = _ssh_set_pcap_filePtr
      .asFunction<int Function(ssh_session, ssh_pcap_file)>();

  int ssh_userauth_none(
    ssh_session session,
    ffi.Pointer<ffi.Int8> username,
  ) {
    return _ssh_userauth_none(
      session,
      username,
    );
  }

  late final _ssh_userauth_nonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ffi.Int8>)>>('ssh_userauth_none');
  late final _ssh_userauth_none = _ssh_userauth_nonePtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>)>();

  int ssh_userauth_list(
    ssh_session session,
    ffi.Pointer<ffi.Int8> username,
  ) {
    return _ssh_userauth_list(
      session,
      username,
    );
  }

  late final _ssh_userauth_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_session, ffi.Pointer<ffi.Int8>)>>('ssh_userauth_list');
  late final _ssh_userauth_list = _ssh_userauth_listPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>)>();

  int ssh_userauth_try_publickey(
    ssh_session session,
    ffi.Pointer<ffi.Int8> username,
    ssh_key pubkey,
  ) {
    return _ssh_userauth_try_publickey(
      session,
      username,
      pubkey,
    );
  }

  late final _ssh_userauth_try_publickeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>,
              ssh_key)>>('ssh_userauth_try_publickey');
  late final _ssh_userauth_try_publickey = _ssh_userauth_try_publickeyPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>, ssh_key)>();

  int ssh_userauth_publickey(
    ssh_session session,
    ffi.Pointer<ffi.Int8> username,
    ssh_key privkey,
  ) {
    return _ssh_userauth_publickey(
      session,
      username,
      privkey,
    );
  }

  late final _ssh_userauth_publickeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>,
              ssh_key)>>('ssh_userauth_publickey');
  late final _ssh_userauth_publickey = _ssh_userauth_publickeyPtr
      .asFunction<int Function(ssh_session, ffi.Pointer<ffi.Int8>, ssh_key)>();

  int ssh_userauth_publickey_auto(
    ssh_session session,
    ffi.Pointer<ffi.Int8> username,
    ffi.Pointer<ffi.Int8> passphrase,
  ) {
    return _ssh_userauth_publickey_auto(
      session,
      username,
      passphrase,
    );
  }

  late final _ssh_userauth_publickey_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('ssh_userauth_publickey_auto');
  late final _ssh_userauth_publickey_auto =
      _ssh_userauth_publickey_autoPtr.asFunction<
          int Function(
              ssh_session, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int ssh_userauth_password(
    ssh_session session,
    ffi.Pointer<ffi.Int8> username,
    ffi.Pointer<ffi.Int8> password,
  ) {
    return _ssh_userauth_password(
      session,
      username,
      password,
    );
  }

  late final _ssh_userauth_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('ssh_userauth_password');
  late final _ssh_userauth_password = _ssh_userauth_passwordPtr.asFunction<
      int Function(
          ssh_session, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int ssh_userauth_kbdint(
    ssh_session session,
    ffi.Pointer<ffi.Int8> user,
    ffi.Pointer<ffi.Int8> submethods,
  ) {
    return _ssh_userauth_kbdint(
      session,
      user,
      submethods,
    );
  }

  late final _ssh_userauth_kbdintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('ssh_userauth_kbdint');
  late final _ssh_userauth_kbdint = _ssh_userauth_kbdintPtr.asFunction<
      int Function(
          ssh_session, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ssh_userauth_kbdint_getinstruction(
    ssh_session session,
  ) {
    return _ssh_userauth_kbdint_getinstruction(
      session,
    );
  }

  late final _ssh_userauth_kbdint_getinstructionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_userauth_kbdint_getinstruction');
  late final _ssh_userauth_kbdint_getinstruction =
      _ssh_userauth_kbdint_getinstructionPtr
          .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_userauth_kbdint_getname(
    ssh_session session,
  ) {
    return _ssh_userauth_kbdint_getname(
      session,
    );
  }

  late final _ssh_userauth_kbdint_getnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_userauth_kbdint_getname');
  late final _ssh_userauth_kbdint_getname = _ssh_userauth_kbdint_getnamePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  int ssh_userauth_kbdint_getnprompts(
    ssh_session session,
  ) {
    return _ssh_userauth_kbdint_getnprompts(
      session,
    );
  }

  late final _ssh_userauth_kbdint_getnpromptsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_userauth_kbdint_getnprompts');
  late final _ssh_userauth_kbdint_getnprompts =
      _ssh_userauth_kbdint_getnpromptsPtr
          .asFunction<int Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_userauth_kbdint_getprompt(
    ssh_session session,
    int i,
    ffi.Pointer<ffi.Int8> echo,
  ) {
    return _ssh_userauth_kbdint_getprompt(
      session,
      i,
      echo,
    );
  }

  late final _ssh_userauth_kbdint_getpromptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ssh_session, ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('ssh_userauth_kbdint_getprompt');
  late final _ssh_userauth_kbdint_getprompt =
      _ssh_userauth_kbdint_getpromptPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ssh_session, int, ffi.Pointer<ffi.Int8>)>();

  int ssh_userauth_kbdint_getnanswers(
    ssh_session session,
  ) {
    return _ssh_userauth_kbdint_getnanswers(
      session,
    );
  }

  late final _ssh_userauth_kbdint_getnanswersPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_userauth_kbdint_getnanswers');
  late final _ssh_userauth_kbdint_getnanswers =
      _ssh_userauth_kbdint_getnanswersPtr
          .asFunction<int Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_userauth_kbdint_getanswer(
    ssh_session session,
    int i,
  ) {
    return _ssh_userauth_kbdint_getanswer(
      session,
      i,
    );
  }

  late final _ssh_userauth_kbdint_getanswerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ssh_session, ffi.Uint32)>>('ssh_userauth_kbdint_getanswer');
  late final _ssh_userauth_kbdint_getanswer = _ssh_userauth_kbdint_getanswerPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session, int)>();

  int ssh_userauth_kbdint_setanswer(
    ssh_session session,
    int i,
    ffi.Pointer<ffi.Int8> answer,
  ) {
    return _ssh_userauth_kbdint_setanswer(
      session,
      i,
      answer,
    );
  }

  late final _ssh_userauth_kbdint_setanswerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_session, ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('ssh_userauth_kbdint_setanswer');
  late final _ssh_userauth_kbdint_setanswer = _ssh_userauth_kbdint_setanswerPtr
      .asFunction<int Function(ssh_session, int, ffi.Pointer<ffi.Int8>)>();

  int ssh_userauth_gssapi(
    ssh_session session,
  ) {
    return _ssh_userauth_gssapi(
      session,
    );
  }

  late final _ssh_userauth_gssapiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_session)>>(
          'ssh_userauth_gssapi');
  late final _ssh_userauth_gssapi =
      _ssh_userauth_gssapiPtr.asFunction<int Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_version(
    int req_version,
  ) {
    return _ssh_version(
      req_version,
    );
  }

  late final _ssh_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'ssh_version');
  late final _ssh_version =
      _ssh_versionPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  void ssh_string_burn(
    ssh_string str,
  ) {
    return _ssh_string_burn(
      str,
    );
  }

  late final _ssh_string_burnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_string)>>(
          'ssh_string_burn');
  late final _ssh_string_burn =
      _ssh_string_burnPtr.asFunction<void Function(ssh_string)>();

  ssh_string ssh_string_copy(
    ssh_string str,
  ) {
    return _ssh_string_copy(
      str,
    );
  }

  late final _ssh_string_copyPtr =
      _lookup<ffi.NativeFunction<ssh_string Function(ssh_string)>>(
          'ssh_string_copy');
  late final _ssh_string_copy =
      _ssh_string_copyPtr.asFunction<ssh_string Function(ssh_string)>();

  ffi.Pointer<ffi.Void> ssh_string_data(
    ssh_string str,
  ) {
    return _ssh_string_data(
      str,
    );
  }

  late final _ssh_string_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ssh_string)>>(
          'ssh_string_data');
  late final _ssh_string_data = _ssh_string_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ssh_string)>();

  int ssh_string_fill(
    ssh_string str,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ssh_string_fill(
      str,
      data,
      len,
    );
  }

  late final _ssh_string_fillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ssh_string, ffi.Pointer<ffi.Void>, size_t)>>('ssh_string_fill');
  late final _ssh_string_fill = _ssh_string_fillPtr
      .asFunction<int Function(ssh_string, ffi.Pointer<ffi.Void>, int)>();

  void ssh_string_free(
    ssh_string str,
  ) {
    return _ssh_string_free(
      str,
    );
  }

  late final _ssh_string_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_string)>>(
          'ssh_string_free');
  late final _ssh_string_free =
      _ssh_string_freePtr.asFunction<void Function(ssh_string)>();

  ssh_string ssh_string_from_char(
    ffi.Pointer<ffi.Int8> what,
  ) {
    return _ssh_string_from_char(
      what,
    );
  }

  late final _ssh_string_from_charPtr =
      _lookup<ffi.NativeFunction<ssh_string Function(ffi.Pointer<ffi.Int8>)>>(
          'ssh_string_from_char');
  late final _ssh_string_from_char = _ssh_string_from_charPtr
      .asFunction<ssh_string Function(ffi.Pointer<ffi.Int8>)>();

  int ssh_string_len(
    ssh_string str,
  ) {
    return _ssh_string_len(
      str,
    );
  }

  late final _ssh_string_lenPtr =
      _lookup<ffi.NativeFunction<size_t Function(ssh_string)>>(
          'ssh_string_len');
  late final _ssh_string_len =
      _ssh_string_lenPtr.asFunction<int Function(ssh_string)>();

  ssh_string ssh_string_new(
    int size,
  ) {
    return _ssh_string_new(
      size,
    );
  }

  late final _ssh_string_newPtr =
      _lookup<ffi.NativeFunction<ssh_string Function(size_t)>>(
          'ssh_string_new');
  late final _ssh_string_new =
      _ssh_string_newPtr.asFunction<ssh_string Function(int)>();

  ffi.Pointer<ffi.Int8> ssh_string_get_char(
    ssh_string str,
  ) {
    return _ssh_string_get_char(
      str,
    );
  }

  late final _ssh_string_get_charPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_string)>>(
          'ssh_string_get_char');
  late final _ssh_string_get_char = _ssh_string_get_charPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_string)>();

  ffi.Pointer<ffi.Int8> ssh_string_to_char(
    ssh_string str,
  ) {
    return _ssh_string_to_char(
      str,
    );
  }

  late final _ssh_string_to_charPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_string)>>(
          'ssh_string_to_char');
  late final _ssh_string_to_char = _ssh_string_to_charPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_string)>();

  void ssh_string_free_char(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _ssh_string_free_char(
      s,
    );
  }

  late final _ssh_string_free_charPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'ssh_string_free_char');
  late final _ssh_string_free_char = _ssh_string_free_charPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int ssh_getpass(
    ffi.Pointer<ffi.Int8> prompt,
    ffi.Pointer<ffi.Int8> buf,
    int len,
    int echo,
    int verify,
  ) {
    return _ssh_getpass(
      prompt,
      buf,
      len,
      echo,
      verify,
    );
  }

  late final _ssh_getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t, ffi.Int32, ffi.Int32)>>('ssh_getpass');
  late final _ssh_getpass = _ssh_getpassPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int, int)>();

  ssh_event ssh_event_new() {
    return _ssh_event_new();
  }

  late final _ssh_event_newPtr =
      _lookup<ffi.NativeFunction<ssh_event Function()>>('ssh_event_new');
  late final _ssh_event_new =
      _ssh_event_newPtr.asFunction<ssh_event Function()>();

  int ssh_event_add_fd(
    ssh_event event,
    int fd,
    int events,
    ssh_event_callback cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ssh_event_add_fd(
      event,
      fd,
      events,
      cb,
      userdata,
    );
  }

  late final _ssh_event_add_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_event, socket_t, ffi.Int16, ssh_event_callback,
              ffi.Pointer<ffi.Void>)>>('ssh_event_add_fd');
  late final _ssh_event_add_fd = _ssh_event_add_fdPtr.asFunction<
      int Function(
          ssh_event, int, int, ssh_event_callback, ffi.Pointer<ffi.Void>)>();

  int ssh_event_add_session(
    ssh_event event,
    ssh_session session,
  ) {
    return _ssh_event_add_session(
      event,
      session,
    );
  }

  late final _ssh_event_add_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_event, ssh_session)>>(
          'ssh_event_add_session');
  late final _ssh_event_add_session = _ssh_event_add_sessionPtr
      .asFunction<int Function(ssh_event, ssh_session)>();

  int ssh_event_add_connector(
    ssh_event event,
    ssh_connector connector,
  ) {
    return _ssh_event_add_connector(
      event,
      connector,
    );
  }

  late final _ssh_event_add_connectorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_event, ssh_connector)>>(
          'ssh_event_add_connector');
  late final _ssh_event_add_connector = _ssh_event_add_connectorPtr
      .asFunction<int Function(ssh_event, ssh_connector)>();

  int ssh_event_dopoll(
    ssh_event event,
    int timeout,
  ) {
    return _ssh_event_dopoll(
      event,
      timeout,
    );
  }

  late final _ssh_event_dopollPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_event, ffi.Int32)>>(
          'ssh_event_dopoll');
  late final _ssh_event_dopoll =
      _ssh_event_dopollPtr.asFunction<int Function(ssh_event, int)>();

  int ssh_event_remove_fd(
    ssh_event event,
    int fd,
  ) {
    return _ssh_event_remove_fd(
      event,
      fd,
    );
  }

  late final _ssh_event_remove_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_event, socket_t)>>(
          'ssh_event_remove_fd');
  late final _ssh_event_remove_fd =
      _ssh_event_remove_fdPtr.asFunction<int Function(ssh_event, int)>();

  int ssh_event_remove_session(
    ssh_event event,
    ssh_session session,
  ) {
    return _ssh_event_remove_session(
      event,
      session,
    );
  }

  late final _ssh_event_remove_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_event, ssh_session)>>(
          'ssh_event_remove_session');
  late final _ssh_event_remove_session = _ssh_event_remove_sessionPtr
      .asFunction<int Function(ssh_event, ssh_session)>();

  int ssh_event_remove_connector(
    ssh_event event,
    ssh_connector connector,
  ) {
    return _ssh_event_remove_connector(
      event,
      connector,
    );
  }

  late final _ssh_event_remove_connectorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_event, ssh_connector)>>(
          'ssh_event_remove_connector');
  late final _ssh_event_remove_connector = _ssh_event_remove_connectorPtr
      .asFunction<int Function(ssh_event, ssh_connector)>();

  void ssh_event_free(
    ssh_event event,
  ) {
    return _ssh_event_free(
      event,
    );
  }

  late final _ssh_event_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_event)>>(
          'ssh_event_free');
  late final _ssh_event_free =
      _ssh_event_freePtr.asFunction<void Function(ssh_event)>();

  ffi.Pointer<ffi.Int8> ssh_get_clientbanner(
    ssh_session session,
  ) {
    return _ssh_get_clientbanner(
      session,
    );
  }

  late final _ssh_get_clientbannerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_clientbanner');
  late final _ssh_get_clientbanner = _ssh_get_clientbannerPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_serverbanner(
    ssh_session session,
  ) {
    return _ssh_get_serverbanner(
      session,
    );
  }

  late final _ssh_get_serverbannerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_serverbanner');
  late final _ssh_get_serverbanner = _ssh_get_serverbannerPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_kex_algo(
    ssh_session session,
  ) {
    return _ssh_get_kex_algo(
      session,
    );
  }

  late final _ssh_get_kex_algoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_kex_algo');
  late final _ssh_get_kex_algo = _ssh_get_kex_algoPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_cipher_in(
    ssh_session session,
  ) {
    return _ssh_get_cipher_in(
      session,
    );
  }

  late final _ssh_get_cipher_inPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_cipher_in');
  late final _ssh_get_cipher_in = _ssh_get_cipher_inPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_cipher_out(
    ssh_session session,
  ) {
    return _ssh_get_cipher_out(
      session,
    );
  }

  late final _ssh_get_cipher_outPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_cipher_out');
  late final _ssh_get_cipher_out = _ssh_get_cipher_outPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_hmac_in(
    ssh_session session,
  ) {
    return _ssh_get_hmac_in(
      session,
    );
  }

  late final _ssh_get_hmac_inPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_hmac_in');
  late final _ssh_get_hmac_in = _ssh_get_hmac_inPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ffi.Pointer<ffi.Int8> ssh_get_hmac_out(
    ssh_session session,
  ) {
    return _ssh_get_hmac_out(
      session,
    );
  }

  late final _ssh_get_hmac_outPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>>(
          'ssh_get_hmac_out');
  late final _ssh_get_hmac_out = _ssh_get_hmac_outPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ssh_session)>();

  ssh_buffer ssh_buffer_new() {
    return _ssh_buffer_new();
  }

  late final _ssh_buffer_newPtr =
      _lookup<ffi.NativeFunction<ssh_buffer Function()>>('ssh_buffer_new');
  late final _ssh_buffer_new =
      _ssh_buffer_newPtr.asFunction<ssh_buffer Function()>();

  void ssh_buffer_free(
    ssh_buffer buffer,
  ) {
    return _ssh_buffer_free(
      buffer,
    );
  }

  late final _ssh_buffer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ssh_buffer)>>(
          'ssh_buffer_free');
  late final _ssh_buffer_free =
      _ssh_buffer_freePtr.asFunction<void Function(ssh_buffer)>();

  int ssh_buffer_reinit(
    ssh_buffer buffer,
  ) {
    return _ssh_buffer_reinit(
      buffer,
    );
  }

  late final _ssh_buffer_reinitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ssh_buffer)>>(
          'ssh_buffer_reinit');
  late final _ssh_buffer_reinit =
      _ssh_buffer_reinitPtr.asFunction<int Function(ssh_buffer)>();

  int ssh_buffer_add_data(
    ssh_buffer buffer,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ssh_buffer_add_data(
      buffer,
      data,
      len,
    );
  }

  late final _ssh_buffer_add_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ssh_buffer, ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('ssh_buffer_add_data');
  late final _ssh_buffer_add_data = _ssh_buffer_add_dataPtr
      .asFunction<int Function(ssh_buffer, ffi.Pointer<ffi.Void>, int)>();

  int ssh_buffer_get_data(
    ssh_buffer buffer,
    ffi.Pointer<ffi.Void> data,
    int requestedlen,
  ) {
    return _ssh_buffer_get_data(
      buffer,
      data,
      requestedlen,
    );
  }

  late final _ssh_buffer_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ssh_buffer, ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('ssh_buffer_get_data');
  late final _ssh_buffer_get_data = _ssh_buffer_get_dataPtr
      .asFunction<int Function(ssh_buffer, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> ssh_buffer_get(
    ssh_buffer buffer,
  ) {
    return _ssh_buffer_get(
      buffer,
    );
  }

  late final _ssh_buffer_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ssh_buffer)>>(
          'ssh_buffer_get');
  late final _ssh_buffer_get = _ssh_buffer_getPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ssh_buffer)>();

  int ssh_buffer_get_len(
    ssh_buffer buffer,
  ) {
    return _ssh_buffer_get_len(
      buffer,
    );
  }

  late final _ssh_buffer_get_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ssh_buffer)>>(
          'ssh_buffer_get_len');
  late final _ssh_buffer_get_len =
      _ssh_buffer_get_lenPtr.asFunction<int Function(ssh_buffer)>();
}

class ssh_counter_struct extends ffi.Struct {
  @ffi.Uint64()
  external int in_bytes;

  @ffi.Uint64()
  external int out_bytes;

  @ffi.Uint64()
  external int in_packets;

  @ffi.Uint64()
  external int out_packets;
}

class ssh_agent_struct extends ffi.Opaque {}

class ssh_buffer_struct extends ffi.Opaque {}

class ssh_channel_struct extends ffi.Opaque {}

class ssh_message_struct extends ffi.Opaque {}

class ssh_pcap_file_struct extends ffi.Opaque {}

class ssh_key_struct extends ffi.Opaque {}

class ssh_scp_struct extends ffi.Opaque {}

class ssh_session_struct extends ffi.Opaque {}

class ssh_string_struct extends ffi.Opaque {}

class ssh_event_struct extends ffi.Opaque {}

class ssh_connector_struct extends ffi.Opaque {}

abstract class ssh_kex_types_e {
  static const int SSH_KEX = 0;
  static const int SSH_HOSTKEYS = 1;
  static const int SSH_CRYPT_C_S = 2;
  static const int SSH_CRYPT_S_C = 3;
  static const int SSH_MAC_C_S = 4;
  static const int SSH_MAC_S_C = 5;
  static const int SSH_COMP_C_S = 6;
  static const int SSH_COMP_S_C = 7;
  static const int SSH_LANG_C_S = 8;
  static const int SSH_LANG_S_C = 9;
}

abstract class ssh_auth_e {
  static const int SSH_AUTH_SUCCESS = 0;
  static const int SSH_AUTH_DENIED = 1;
  static const int SSH_AUTH_PARTIAL = 2;
  static const int SSH_AUTH_INFO = 3;
  static const int SSH_AUTH_AGAIN = 4;
  static const int SSH_AUTH_ERROR = -1;
}

abstract class ssh_requests_e {
  static const int SSH_REQUEST_AUTH = 1;
  static const int SSH_REQUEST_CHANNEL_OPEN = 2;
  static const int SSH_REQUEST_CHANNEL = 3;
  static const int SSH_REQUEST_SERVICE = 4;
  static const int SSH_REQUEST_GLOBAL = 5;
}

abstract class ssh_channel_type_e {
  static const int SSH_CHANNEL_UNKNOWN = 0;
  static const int SSH_CHANNEL_SESSION = 1;
  static const int SSH_CHANNEL_DIRECT_TCPIP = 2;
  static const int SSH_CHANNEL_FORWARDED_TCPIP = 3;
  static const int SSH_CHANNEL_X11 = 4;
  static const int SSH_CHANNEL_AUTH_AGENT = 5;
}

abstract class ssh_channel_requests_e {
  static const int SSH_CHANNEL_REQUEST_UNKNOWN = 0;
  static const int SSH_CHANNEL_REQUEST_PTY = 1;
  static const int SSH_CHANNEL_REQUEST_EXEC = 2;
  static const int SSH_CHANNEL_REQUEST_SHELL = 3;
  static const int SSH_CHANNEL_REQUEST_ENV = 4;
  static const int SSH_CHANNEL_REQUEST_SUBSYSTEM = 5;
  static const int SSH_CHANNEL_REQUEST_WINDOW_CHANGE = 6;
  static const int SSH_CHANNEL_REQUEST_X11 = 7;
}

abstract class ssh_global_requests_e {
  static const int SSH_GLOBAL_REQUEST_UNKNOWN = 0;
  static const int SSH_GLOBAL_REQUEST_TCPIP_FORWARD = 1;
  static const int SSH_GLOBAL_REQUEST_CANCEL_TCPIP_FORWARD = 2;
  static const int SSH_GLOBAL_REQUEST_KEEPALIVE = 3;
}

abstract class ssh_publickey_state_e {
  static const int SSH_PUBLICKEY_STATE_ERROR = -1;
  static const int SSH_PUBLICKEY_STATE_NONE = 0;
  static const int SSH_PUBLICKEY_STATE_VALID = 1;
  static const int SSH_PUBLICKEY_STATE_WRONG = 2;
}

abstract class ssh_server_known_e {
  static const int SSH_SERVER_ERROR = -1;
  static const int SSH_SERVER_NOT_KNOWN = 0;
  static const int SSH_SERVER_KNOWN_OK = 1;
  static const int SSH_SERVER_KNOWN_CHANGED = 2;
  static const int SSH_SERVER_FOUND_OTHER = 3;
  static const int SSH_SERVER_FILE_NOT_FOUND = 4;
}

abstract class ssh_known_hosts_e {
  /// There had been an error checking the host.
  static const int SSH_KNOWN_HOSTS_ERROR = -2;

  /// The known host file does not exist. The host is thus unknown. File will
  /// be created if host key is accepted.
  static const int SSH_KNOWN_HOSTS_NOT_FOUND = -1;

  /// The server is unknown. User should confirm the public key hash is
  /// correct.
  static const int SSH_KNOWN_HOSTS_UNKNOWN = 0;

  /// The server is known and has not changed.
  static const int SSH_KNOWN_HOSTS_OK = 1;

  /// The server key has changed. Either you are under attack or the
  /// administrator changed the key. You HAVE to warn the user about a
  /// possible attack.
  static const int SSH_KNOWN_HOSTS_CHANGED = 2;

  /// The server gave use a key of a type while we had an other type recorded.
  /// It is a possible attack.
  static const int SSH_KNOWN_HOSTS_OTHER = 3;
}

abstract class ssh_error_types_e {
  static const int SSH_NO_ERROR = 0;
  static const int SSH_REQUEST_DENIED = 1;
  static const int SSH_FATAL = 2;
  static const int SSH_EINTR = 3;
}

abstract class ssh_keytypes_e {
  static const int SSH_KEYTYPE_UNKNOWN = 0;
  static const int SSH_KEYTYPE_DSS = 1;
  static const int SSH_KEYTYPE_RSA = 2;
  static const int SSH_KEYTYPE_RSA1 = 3;
  static const int SSH_KEYTYPE_ECDSA = 4;
  static const int SSH_KEYTYPE_ED25519 = 5;
  static const int SSH_KEYTYPE_DSS_CERT01 = 6;
  static const int SSH_KEYTYPE_RSA_CERT01 = 7;
  static const int SSH_KEYTYPE_ECDSA_P256 = 8;
  static const int SSH_KEYTYPE_ECDSA_P384 = 9;
  static const int SSH_KEYTYPE_ECDSA_P521 = 10;
  static const int SSH_KEYTYPE_ECDSA_P256_CERT01 = 11;
  static const int SSH_KEYTYPE_ECDSA_P384_CERT01 = 12;
  static const int SSH_KEYTYPE_ECDSA_P521_CERT01 = 13;
  static const int SSH_KEYTYPE_ED25519_CERT01 = 14;
}

abstract class ssh_keycmp_e {
  static const int SSH_KEY_CMP_PUBLIC = 0;
  static const int SSH_KEY_CMP_PRIVATE = 1;
}

class ssh_knownhosts_entry extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> hostname;

  external ffi.Pointer<ffi.Int8> unparsed;

  external ssh_key publickey;

  external ffi.Pointer<ffi.Int8> comment;
}

typedef ssh_key = ffi.Pointer<ssh_key_struct>;

/// @}
abstract class ssh_options_e {
  static const int SSH_OPTIONS_HOST = 0;
  static const int SSH_OPTIONS_PORT = 1;
  static const int SSH_OPTIONS_PORT_STR = 2;
  static const int SSH_OPTIONS_FD = 3;
  static const int SSH_OPTIONS_USER = 4;
  static const int SSH_OPTIONS_SSH_DIR = 5;
  static const int SSH_OPTIONS_IDENTITY = 6;
  static const int SSH_OPTIONS_ADD_IDENTITY = 7;
  static const int SSH_OPTIONS_KNOWNHOSTS = 8;
  static const int SSH_OPTIONS_TIMEOUT = 9;
  static const int SSH_OPTIONS_TIMEOUT_USEC = 10;
  static const int SSH_OPTIONS_SSH1 = 11;
  static const int SSH_OPTIONS_SSH2 = 12;
  static const int SSH_OPTIONS_LOG_VERBOSITY = 13;
  static const int SSH_OPTIONS_LOG_VERBOSITY_STR = 14;
  static const int SSH_OPTIONS_CIPHERS_C_S = 15;
  static const int SSH_OPTIONS_CIPHERS_S_C = 16;
  static const int SSH_OPTIONS_COMPRESSION_C_S = 17;
  static const int SSH_OPTIONS_COMPRESSION_S_C = 18;
  static const int SSH_OPTIONS_PROXYCOMMAND = 19;
  static const int SSH_OPTIONS_BINDADDR = 20;
  static const int SSH_OPTIONS_STRICTHOSTKEYCHECK = 21;
  static const int SSH_OPTIONS_COMPRESSION = 22;
  static const int SSH_OPTIONS_COMPRESSION_LEVEL = 23;
  static const int SSH_OPTIONS_KEY_EXCHANGE = 24;
  static const int SSH_OPTIONS_HOSTKEYS = 25;
  static const int SSH_OPTIONS_GSSAPI_SERVER_IDENTITY = 26;
  static const int SSH_OPTIONS_GSSAPI_CLIENT_IDENTITY = 27;
  static const int SSH_OPTIONS_GSSAPI_DELEGATE_CREDENTIALS = 28;
  static const int SSH_OPTIONS_HMAC_C_S = 29;
  static const int SSH_OPTIONS_HMAC_S_C = 30;
  static const int SSH_OPTIONS_PASSWORD_AUTH = 31;
  static const int SSH_OPTIONS_PUBKEY_AUTH = 32;
  static const int SSH_OPTIONS_KBDINT_AUTH = 33;
  static const int SSH_OPTIONS_GSSAPI_AUTH = 34;
  static const int SSH_OPTIONS_GLOBAL_KNOWNHOSTS = 35;
  static const int SSH_OPTIONS_NODELAY = 36;
  static const int SSH_OPTIONS_PUBLICKEY_ACCEPTED_TYPES = 37;
  static const int SSH_OPTIONS_PROCESS_CONFIG = 38;
  static const int SSH_OPTIONS_REKEY_DATA = 39;
  static const int SSH_OPTIONS_REKEY_TIME = 40;
}

abstract class ssh_scp_request_types {
  /// A new directory is going to be pulled
  static const int SSH_SCP_REQUEST_NEWDIR = 1;

  /// A new file is going to be pulled
  static const int SSH_SCP_REQUEST_NEWFILE = 2;

  /// End of requests
  static const int SSH_SCP_REQUEST_EOF = 3;

  /// End of directory
  static const int SSH_SCP_REQUEST_ENDDIR = 4;

  /// Warning received
  static const int SSH_SCP_REQUEST_WARNING = 5;
}

abstract class ssh_connector_flags_e {
  /// Only the standard stream of the channel
  static const int SSH_CONNECTOR_STDOUT = 1;
  static const int SSH_CONNECTOR_STDINOUT = 1;

  /// Only the exception stream of the channel
  static const int SSH_CONNECTOR_STDERR = 2;

  /// Merge both standard and exception streams
  static const int SSH_CONNECTOR_BOTH = 3;
}

typedef ssh_session = ffi.Pointer<ssh_session_struct>;
typedef ssh_channel = ffi.Pointer<ssh_channel_struct>;

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_usec;
}

typedef ssh_counter = ffi.Pointer<ssh_counter_struct>;
typedef ssh_connector = ffi.Pointer<ssh_connector_struct>;
typedef socket_t = SOCKET;
typedef SOCKET = UINT_PTR;
typedef UINT_PTR = ffi.Uint64;
typedef size_t = ffi.Uint64;

abstract class ssh_publickey_hash_type {
  static const int SSH_PUBLICKEY_HASH_SHA1 = 0;
  static const int SSH_PUBLICKEY_HASH_MD5 = 1;
  static const int SSH_PUBLICKEY_HASH_SHA256 = 2;
}

typedef ssh_message = ffi.Pointer<ssh_message_struct>;
typedef mode_t = ffi.Int32;
typedef ssh_pcap_file = ffi.Pointer<ssh_pcap_file_struct>;

/// @brief SSH authentication callback for password and publickey auth.
///
/// @param prompt        Prompt to be displayed.
/// @param buf           Buffer to save the password. You should null-terminate it.
/// @param len           Length of the buffer.
/// @param echo          Enable or disable the echo of what you type.
/// @param verify        Should the password be verified?
/// @param userdata      Userdata to be passed to the callback function. Useful
/// for GUI applications.
///
/// @return              0 on success, < 0 on error.
typedef ssh_auth_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, size_t,
            ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef ssh_gssapi_creds = ffi.Pointer<ffi.Void>;
typedef ssh_scp = ffi.Pointer<ssh_scp_struct>;

class fd_set extends ffi.Struct {
  @u_int()
  external int fd_count;

  @ffi.Array.multi([64])
  external ffi.Array<SOCKET> fd_array;
}

typedef u_int = ffi.Uint32;
typedef ssh_string = ffi.Pointer<ssh_string_struct>;
typedef ssh_event = ffi.Pointer<ssh_event_struct>;
typedef ssh_event_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(socket_t, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef ssh_buffer = ffi.Pointer<ssh_buffer_struct>;

const int SSH_LOG_NOLOG = 0;

const int SSH_LOG_WARNING = 1;

const int SSH_LOG_PROTOCOL = 2;

const int SSH_LOG_PACKET = 3;

const int SSH_LOG_FUNCTIONS = 4;

const int SSH_SCP_WRITE = 0;

const int SSH_SCP_READ = 1;

const int SSH_SCP_RECURSIVE = 16;

const int SSH_INVALID_SOCKET = -1;

const int SSH_CRYPT = 2;

const int SSH_MAC = 3;

const int SSH_COMP = 4;

const int SSH_LANG = 5;

const int SSH_AUTH_METHOD_UNKNOWN = 0;

const int SSH_AUTH_METHOD_NONE = 1;

const int SSH_AUTH_METHOD_PASSWORD = 2;

const int SSH_AUTH_METHOD_PUBLICKEY = 4;

const int SSH_AUTH_METHOD_HOSTBASED = 8;

const int SSH_AUTH_METHOD_INTERACTIVE = 16;

const int SSH_AUTH_METHOD_GSSAPI_MIC = 32;

const int SSH_CLOSED = 1;

const int SSH_READ_PENDING = 2;

const int SSH_CLOSED_ERROR = 4;

const int SSH_WRITE_PENDING = 8;

const int MD5_DIGEST_LEN = 16;

const int SSH_ADDRSTRLEN = 46;

const int SSH_OK = 0;

const int SSH_ERROR = -1;

const int SSH_AGAIN = -2;

const int SSH_EOF = -127;

const int SSH_LOG_RARE = 1;

const int SSH_LOG_NONE = 0;

const int SSH_LOG_WARN = 1;

const int SSH_LOG_INFO = 2;

const int SSH_LOG_DEBUG = 3;

const int SSH_LOG_TRACE = 4;
