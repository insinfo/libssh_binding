// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, camel_case_types

import 'dart:ffi' as ffi;

import 'libssh_binding.dart';

/// The structure to replace libssh functions with appropriate callbacks.
class ssh_callbacks_struct extends ffi.Struct {
  /// DON'T SET THIS use ssh_callbacks_init() instead.
  @size_t()
  external int size;

  /// User-provided data. User is free to set anything he wants here
  external ffi.Pointer<ffi.Void> userdata;

  /// This functions will be called if e.g. a keyphrase is needed.
  @ffi.Int32()
  external int auth_function;

  /// This function will be called each time a loggable event happens.
  external ssh_log_callback log_function;

  /// This function gets called during connection time to indicate the
  /// percentage of connection steps completed.
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>> connect_status_function;

  /// This function will be called each time a global request is received.
  external ssh_global_request_callback global_request_function;

  /// This function will be called when an incoming X11 request is received.
  @ffi.Int32()
  external int channel_open_request_x11_function;

  /// This function will be called when an incoming "auth-agent" request is received.
  external ssh_channel_open_request_auth_agent_callback channel_open_request_auth_agent_function;
}

/// @brief SSH log callback. All logging messages will go through this callback
/// @param session Current session handler
/// @param priority Priority of the log, the smaller being the more important
/// @param message the actual message
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_log_callback = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH global request callback. All global request will go through this
/// callback.
/// @param session Current session handler
/// @param message the actual message
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_global_request_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// @brief Handles an SSH new channel open "auth-agent" request. This happens when the server
/// sends back an "auth-agent" connection attempt. This is a client-side API
/// @param session current session handler
/// @param userdata Userdata to be passed to the callback function.
/// @returns a valid ssh_channel handle if the request is to be allowed
/// @returns NULL if the request should not be allowed
/// @warning The channel pointer returned by this callback must be closed by the application.
typedef ssh_channel_open_request_auth_agent_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// This structure can be used to implement a libssh server, with appropriate callbacks.
class ssh_server_callbacks_struct extends ffi.Struct {
  /// DON'T SET THIS use ssh_callbacks_init() instead.
  @size_t()
  external int size;

  /// User-provided data. User is free to set anything he wants here
  external ffi.Pointer<ffi.Void> userdata;

  /// This function gets called when a client tries to authenticate through
  /// password method.
  external ssh_auth_password_callback auth_password_function;

  /// This function gets called when a client tries to authenticate through
  /// none method.
  external ssh_auth_none_callback auth_none_function;

  /// This function gets called when a client tries to authenticate through
  /// gssapi-mic method.
  external ssh_auth_gssapi_mic_callback auth_gssapi_mic_function;

  /// this function gets called when a client tries to authenticate or offer
  /// a public key.
  external ssh_auth_pubkey_callback auth_pubkey_function;

  /// This functions gets called when a service request is issued by the
  /// client
  external ssh_service_request_callback service_request_function;

  /// This functions gets called when a new channel request is issued by
  /// the client
  external ssh_channel_open_request_session_callback channel_open_request_session_function;

  /// This function will be called when a new gssapi authentication is attempted.
  @ffi.Int32()
  external int gssapi_select_oid_function;

  /// This function will be called when a gssapi token comes in.
  external ssh_gssapi_accept_sec_ctx_callback gssapi_accept_sec_ctx_function;

  external ssh_gssapi_verify_mic_callback gssapi_verify_mic_function;
}

/// @brief SSH authentication callback.
/// @param session Current session handler
/// @param user User that wants to authenticate
/// @param password Password used for authentication
/// @param userdata Userdata to be passed to the callback function.
/// @returns SSH_AUTH_SUCCESS Authentication is accepted.
/// @returns SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed.
/// @returns SSH_AUTH_DENIED Authentication failed.
typedef ssh_auth_password_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH authentication callback. Tries to authenticates user with the "none" method
/// which is anonymous or passwordless.
/// @param session Current session handler
/// @param user User that wants to authenticate
/// @param userdata Userdata to be passed to the callback function.
/// @returns SSH_AUTH_SUCCESS Authentication is accepted.
/// @returns SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed.
/// @returns SSH_AUTH_DENIED Authentication failed.
typedef ssh_auth_none_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH authentication callback. Tries to authenticates user with the "gssapi-with-mic" method
/// @param session Current session handler
/// @param user Username of the user (can be spoofed)
/// @param principal Authenticated principal of the user, including realm.
/// @param userdata Userdata to be passed to the callback function.
/// @returns SSH_AUTH_SUCCESS Authentication is accepted.
/// @returns SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed.
/// @returns SSH_AUTH_DENIED Authentication failed.
/// @warning Implementations should verify that parameter user matches in some way the principal.
/// user and principal can be different. Only the latter is guaranteed to be safe.
typedef ssh_auth_gssapi_mic_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH authentication callback.
/// @param session Current session handler
/// @param user User that wants to authenticate
/// @param pubkey public key used for authentication
/// @param signature_state SSH_PUBLICKEY_STATE_NONE if the key is not signed (simple public key probe),
/// SSH_PUBLICKEY_STATE_VALID if the signature is valid. Others values should be
/// replied with a SSH_AUTH_DENIED.
/// @param userdata Userdata to be passed to the callback function.
/// @returns SSH_AUTH_SUCCESS Authentication is accepted.
/// @returns SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed.
/// @returns SSH_AUTH_DENIED Authentication failed.
typedef ssh_auth_pubkey_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ssh_key_struct>, ffi.Int8, ffi.Pointer<ffi.Void>)>>;

/// @brief Handles an SSH service request
/// @param session current session handler
/// @param service name of the service (e.g. "ssh-userauth") requested
/// @param userdata Userdata to be passed to the callback function.
/// @returns 0 if the request is to be allowed
/// @returns -1 if the request should not be allowed
typedef ssh_service_request_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief Handles an SSH new channel open session request
/// @param session current session handler
/// @param userdata Userdata to be passed to the callback function.
/// @returns a valid ssh_channel handle if the request is to be allowed
/// @returns NULL if the request should not be allowed
/// @warning The channel pointer returned by this callback must be closed by the application.
typedef ssh_channel_open_request_session_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef ssh_gssapi_accept_sec_ctx_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ssh_string>, ffi.Pointer<ssh_string>, ffi.Pointer<ffi.Void>)>>;

typedef ssh_gssapi_verify_mic_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ssh_string>, ffi.Pointer<ffi.Void>, size_t, ffi.Pointer<ffi.Void>)>>;
typedef ssh_server_callbacks = ffi.Pointer<ssh_server_callbacks_struct>;

/// These are the callbacks exported by the socket structure
/// They are called by the socket module when a socket event appears
class ssh_socket_callbacks_struct extends ffi.Struct {
  /// User-provided data. User is free to set anything he wants here
  external ffi.Pointer<ffi.Void> userdata;

  /// This function will be called each time data appears on socket. The data
  /// not consumed will appear on the next data event.
  external ssh_callback_data data;

  /// This function will be called each time a controlflow state changes, i.e.
  /// the socket is available for reading or writing.
  external ssh_callback_int controlflow;

  /// This function will be called each time an exception appears on socket. An
  /// exception can be a socket problem (timeout, ...) or an end-of-file.
  external ssh_callback_int_int exception;

  /// This function is called when the ssh_socket_connect was used on the socket
  /// on nonblocking state, and the connection successed.
  external ssh_callback_int_int connected;
}

/// @internal
/// @brief callback for data received messages.
/// @param data data retrieved from the socket or stream
/// @param len number of bytes available from this stream
/// @param user user-supplied pointer sent along with all callback messages
/// @returns number of bytes processed by the callee. The remaining bytes will
/// be sent in the next callback message, when more data is available.
typedef ssh_callback_data
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t, ffi.Pointer<ffi.Void>)>>;

/// @internal
/// @brief callback to process simple codes
/// @param code value to transmit
/// @param user Userdata to pass in callback
typedef ssh_callback_int = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef ssh_callback_int_int
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class ssh_packet_callbacks_struct extends ffi.Struct {
  /// Index of the first packet type being handled
  @ffi.Int32()
  external int start;

  /// Number of packets being handled by this callback struct
  @ffi.Int32()
  external int n_callbacks;

  /// A pointer to n_callbacks packet callbacks
  external ffi.Pointer<ssh_packet_callback> callbacks;

  /// User-provided data. User is free to set anything he wants here
  external ffi.Pointer<ffi.Void> user;
}

/// @brief Prototype for a packet callback, to be called when a new packet arrives
/// @param session The current session of the packet
/// @param type packet type (see ssh2.h)
/// @param packet buffer containing the packet, excluding size, type and padding fields
/// @param user user argument to the callback
/// and are called each time a packet shows up
/// @returns SSH_PACKET_USED Packet was parsed and used
/// @returns SSH_PACKET_NOT_USED Packet was not used or understood, processing must continue
typedef ssh_packet_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef ssh_callbacks = ffi.Pointer<ssh_callbacks_struct>;

class ssh_channel_callbacks_struct extends ffi.Struct {
  /// DON'T SET THIS use ssh_callbacks_init() instead.
  @size_t()
  external int size;

  /// User-provided data. User is free to set anything he wants here
  external ffi.Pointer<ffi.Void> userdata;

  /// This functions will be called when there is data available.
  external ssh_channel_data_callback channel_data_function;

  /// This functions will be called when the channel has received an EOF.
  external ssh_channel_eof_callback channel_eof_function;

  /// This functions will be called when the channel has been closed by remote
  external ssh_channel_close_callback channel_close_function;

  /// This functions will be called when a signal has been received
  external ssh_channel_signal_callback channel_signal_function;

  /// This functions will be called when an exit status has been received
  external ssh_channel_exit_status_callback channel_exit_status_function;

  /// This functions will be called when an exit signal has been received
  external ssh_channel_exit_signal_callback channel_exit_signal_function;

  /// This function will be called when a client requests a PTY
  external ssh_channel_pty_request_callback channel_pty_request_function;

  /// This function will be called when a client requests a shell
  external ssh_channel_shell_request_callback channel_shell_request_function;

  /// This function will be called when a client requests agent
  /// authentication forwarding.
  external ssh_channel_auth_agent_req_callback channel_auth_agent_req_function;

  /// This function will be called when a client requests X11
  /// forwarding.
  external ssh_channel_x11_req_callback channel_x11_req_function;

  /// This function will be called when a client requests a
  /// window change.
  external ssh_channel_pty_window_change_callback channel_pty_window_change_function;

  /// This function will be called when a client requests a
  /// command execution.
  external ssh_channel_exec_request_callback channel_exec_request_function;

  /// This function will be called when a client requests an environment
  /// variable to be set.
  external ssh_channel_env_request_callback channel_env_request_function;

  /// This function will be called when a client requests a subsystem
  /// (like sftp).
  external ssh_channel_subsystem_request_callback channel_subsystem_request_function;

  /// This function will be called when the channel write is guaranteed
  /// not to block.
  external ssh_channel_write_wontblock_callback channel_write_wontblock_function;
}

/// @brief SSH channel data callback. Called when data is available on a channel
/// @param session Current session handler
/// @param channel the actual channel
/// @param data the data that has been read on the channel
/// @param len the length of the data
/// @param is_stderr is 0 for stdout or 1 for stderr
/// @param userdata Userdata to be passed to the callback function.
/// @returns number of bytes processed by the callee. The remaining bytes will
/// be sent in the next callback message, when more data is available.
typedef ssh_channel_data_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel eof callback. Called when a channel receives EOF
/// @param session Current session handler
/// @param channel the actual channel
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_channel_eof_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel close callback. Called when a channel is closed by remote peer
/// @param session Current session handler
/// @param channel the actual channel
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_channel_close_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel signal callback. Called when a channel has received a signal
/// @param session Current session handler
/// @param channel the actual channel
/// @param signal the signal name (without the SIG prefix)
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_channel_signal_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel exit status callback. Called when a channel has received an exit status
/// @param session Current session handler
/// @param channel the actual channel
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_channel_exit_status_callback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel exit signal callback. Called when a channel has received an exit signal
/// @param session Current session handler
/// @param channel the actual channel
/// @param signal the signal name (without the SIG prefix)
/// @param core a boolean telling wether a core has been dumped or not
/// @param errmsg the description of the exception
/// @param lang the language of the description (format: RFC 3066)
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_channel_exit_signal_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel PTY request from a client.
/// @param channel the channel
/// @param term The type of terminal emulation
/// @param width width of the terminal, in characters
/// @param height height of the terminal, in characters
/// @param pxwidth width of the terminal, in pixels
/// @param pxheight height of the terminal, in pixels
/// @param userdata Userdata to be passed to the callback function.
/// @returns 0 if the pty request is accepted
/// @returns -1 if the request is denied
typedef ssh_channel_pty_request_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32, ffi.Int32,
            ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel Shell request from a client.
/// @param channel the channel
/// @param userdata Userdata to be passed to the callback function.
/// @returns 0 if the shell request is accepted
/// @returns 1 if the request is denied
typedef ssh_channel_shell_request_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH auth-agent-request from the client. This request is
/// sent by a client when agent forwarding is available.
/// Server is free to ignore this callback, no answer is expected.
/// @param channel the channel
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_channel_auth_agent_req_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH X11 request from the client. This request is
/// sent by a client when X11 forwarding is requested(and available).
/// Server is free to ignore this callback, no answer is expected.
/// @param channel the channel
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_channel_x11_req_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
            ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel PTY windows change (terminal size) from a client.
/// @param channel the channel
/// @param width width of the terminal, in characters
/// @param height height of the terminal, in characters
/// @param pxwidth width of the terminal, in pixels
/// @param pxheight height of the terminal, in pixels
/// @param userdata Userdata to be passed to the callback function.
/// @returns 0 if the pty request is accepted
/// @returns -1 if the request is denied
typedef ssh_channel_pty_window_change_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel Exec request from a client.
/// @param channel the channel
/// @param command the shell command to be executed
/// @param userdata Userdata to be passed to the callback function.
/// @returns 0 if the exec request is accepted
/// @returns 1 if the request is denied
typedef ssh_channel_exec_request_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel environment request from a client.
/// @param channel the channel
/// @param env_name name of the environment value to be set
/// @param env_value value of the environment value to be set
/// @param userdata Userdata to be passed to the callback function.
/// @returns 0 if the env request is accepted
/// @returns 1 if the request is denied
/// @warning some environment variables can be dangerous if changed (e.g.
/// LD_PRELOAD) and should not be fulfilled.
typedef ssh_channel_env_request_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel subsystem request from a client.
/// @param channel the channel
/// @param subsystem the subsystem required
/// @param userdata Userdata to be passed to the callback function.
/// @returns 0 if the subsystem request is accepted
/// @returns 1 if the request is denied
typedef ssh_channel_subsystem_request_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Pointer<ssh_channel>, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

/// @brief SSH channel write will not block (flow control).
///
/// @param channel the channel
///
/// @param[in] bytes size of the remote window in bytes. Writing as much data
/// will not block.
///
/// @param[in] userdata Userdata to be passed to the callback function.
///
/// @returns 0 default return value (other return codes may be added in future).
typedef ssh_channel_write_wontblock_callback = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ssh_channel>, size_t, ffi.Pointer<ffi.Void>)>>;
typedef ssh_channel_callbacks = ffi.Pointer<ssh_channel_callbacks_struct>;

class ssh_threads_callbacks_struct extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> type;

  external ssh_thread_callback mutex_init;

  external ssh_thread_callback mutex_destroy;

  external ssh_thread_callback mutex_lock;

  external ssh_thread_callback mutex_unlock;

  external ssh_thread_id_callback thread_id;
}

/// @group libssh_threads
/// @{
typedef ssh_thread_callback = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef ssh_thread_id_callback = ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function()>>;

/// @brief SSH log callback.
///
/// All logging messages will go through this callback.
///
/// @param priority  Priority of the log, the smaller being the more important.
///
/// @param function  The function name calling the the logging fucntions.
///
/// @param message   The actual message
///
/// @param userdata Userdata to be passed to the callback function.
typedef ssh_logging_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

const int SSH_SOCKET_FLOW_WRITEWILLBLOCK = 1;

const int SSH_SOCKET_FLOW_WRITEWONTBLOCK = 2;

const int SSH_SOCKET_EXCEPTION_EOF = 1;

const int SSH_SOCKET_EXCEPTION_ERROR = 2;

const int SSH_SOCKET_CONNECTED_OK = 1;

const int SSH_SOCKET_CONNECTED_ERROR = 2;

const int SSH_SOCKET_CONNECTED_TIMEOUT = 3;

const int SSH_PACKET_USED = 1;

const int SSH_PACKET_NOT_USED = 2;
